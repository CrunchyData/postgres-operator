name: Tests

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  go-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: 1.x
      - run: make check
      - run: make check-generate

  kubernetes-api:
    runs-on: ubuntu-latest
    needs: [go-test]
    strategy:
      fail-fast: false
      matrix:
        kubernetes: ['default']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with: { go-version: 1.x }
      - run: go mod download
      - run: ENVTEST_K8S_VERSION="${KUBERNETES#default}" make check-envtest
        env:
          KUBERNETES: "${{ matrix.kubernetes }}"
          GO_TEST: go test --coverprofile 'envtest.coverage' --coverpkg ./internal/...

      # Upload coverage to GitHub
      - run: gzip envtest.coverage
      - uses: actions/upload-artifact@v3
        with:
          name: "kubernetes-api=${{ matrix.kubernetes }}"
          path: envtest.coverage.gz
          retention-days: 1

  kubernetes-k3d:
    if: "${{ github.repository == 'CrunchyData/postgres-operator' }}"
    runs-on: ubuntu-latest
    needs: [go-test]
    strategy:
      fail-fast: false
      matrix:
        kubernetes: [latest, v1.21]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with: { go-version: 1.x }

      - name: Install k3d
        # Git tag from https://github.com/rancher/k3d/releases or "latest"
        env: { K3D_TAG: latest }
        run: |
          curl --fail --silent https://raw.githubusercontent.com/rancher/k3d/main/install.sh |
            TAG="${K3D_TAG#latest}" bash && k3d version | head -n1

      - name: Start k3s
        # https://rancher.com/docs/k3s/latest/en/upgrades/basic/#release-channels
        env: { K3S_CHANNEL: "${{ matrix.kubernetes }}" }
        run: k3d cluster create --image="+${K3S_CHANNEL}" --no-lb --timeout=2m --wait

      - name: Prefetch container images
        run: |
          {
            echo '"registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi8-13.6-1"'
            echo '"registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi8-2.38-0"'
            echo '"registry.developers.crunchydata.com/crunchydata/crunchy-pgbouncer:ubi8-1.16-2"'
          } |
          jq --slurp --arg name 'image-prefetch' --argjson labels '{"name":"image-prefetch"}' '{
            apiVersion: "apps/v1", kind: "DaemonSet",
            metadata: { name: $name, labels: $labels },
            spec: {
              selector: { matchLabels: $labels },
              template: {
                metadata: { labels: $labels },
                spec: {
                  initContainers: to_entries | map({ name: "c\(.key)", command: ["true"], image: .value }),
                  containers: [{ name: "pause", image: "k8s.gcr.io/pause:3.5" }]
                }
              }
            }
          }' |
          kubectl create --filename=- && {
            kubectl rollout status daemonset.apps/image-prefetch --timeout=90s ||
            kubectl describe daemonset.apps/image-prefetch
          }
      - run: make createnamespaces check-envtest-existing
        env:
          PGO_TEST_TIMEOUT_SCALE: 1.2
          GO_TEST: go test --coverprofile 'envtest-existing.coverage' --coverpkg ./internal/...

      # Upload coverage to GitHub
      - run: gzip envtest-existing.coverage
      - uses: actions/upload-artifact@v3
        with:
          name: "kubernetes-k3d=${{ matrix.kubernetes }}"
          path: envtest-existing.coverage.gz
          retention-days: 1

  coverage-report:
    if: ${{ success() || contains(needs.*.result, 'success') }}
    runs-on: ubuntu-latest
    needs:
      - kubernetes-api
      - kubernetes-k3d
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with: { go-version: 1.x }
      - uses: actions/download-artifact@v3
        with: { path: download }

      # Combine the coverage profiles by taking the mode line from any one file
      # and the data from all files. Write a list of functions with less than
      # 100% coverage to the job summary, and upload a complete HTML report.
      - name: Generate report
        run: |
          gunzip --keep download/*/*.gz
          ( sed -e '1q' download/*/*.coverage
            tail -qn +2 download/*/*.coverage ) > total.coverage
          go tool cover --func total.coverage -o total-coverage.txt
          go tool cover --html total.coverage -o total-coverage.html

          awk < total-coverage.txt '
            END { print "<details><summary>Total Coverage: <code>" $3 " " $2 "</code></summary>" }
          ' >> "${GITHUB_STEP_SUMMARY}"

          sed < total-coverage.txt -e '/100.0%/d' -e "s,$(go list -m)/,," | column -t | awk '
            NR == 1 { print "\n\n```" } { print } END { if (NR > 0) print "```\n\n"; print "</details>" }
          ' >> "${GITHUB_STEP_SUMMARY}"

      # Upload coverage to GitHub
      - run: gzip total-coverage.html
      - uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: total-coverage.html.gz
          retention-days: 15
