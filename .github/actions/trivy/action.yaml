# Copyright 2024 - 2025 Crunchy Data Solutions, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# schema documentation: https://docs.github.com/actions/sharing-automations/creating-actions/metadata-syntax-for-github-actions
# yaml-language-server: $schema=https://json.schemastore.org/github-action.json

name: Trivy
description: Scan this project using Trivy

# The Trivy team maintains an action, but it has trouble caching its vulnerability data:
# https://github.com/aquasecurity/trivy-action/issues/389
#
#  1. It caches vulnerability data once per calendar day, despite Trivy wanting
#     to download more frequently than that.
#  2. When it fails to download the data, it fails the workflow *and* caches
#     the incomplete data.
#  3. When (1) and (2) coincide, every following run that day *must* update the data,
#     producing more opportunities for (2) and more failed workflows.
#
# The action below uses any recent cache matching `cache-prefix` and calculates a cache key
# derived from the data Trivy downloads. An older database is better than no scans at all.
# When a run successfully updates the data, that data is cached and available to other runs.

inputs:
  cache:
    default: restore,success,use
    description: >-
      What Trivy data to cache; one or more of restore, save, success, or use.
      The value "use" instructs Trivy to read and write to its cache.
      The value "restore" loads the Trivy cache from GitHub.
      The value "success" saves the Trivy cache to GitHub when Trivy succeeds.
      The value "save" saves the Trivy cache to GitHub regardless of Trivy.

  database:
    default: update
    description: >-
      How Trivy should handle its data; one of update or skip.
      The value "skip" fetches no Trivy data at all.

  setup:
    default: v0.65.0,cache
    description: >-
      How to install Trivy; one or more of version, none, or cache.
      The value "none" does not install Trivy at all.

  cache-directory:
    default: ${{ github.workspace }}/.cache/trivy
    description: >-
      Directory where Trivy should store its data

  cache-prefix:
    default: cache-trivy
    description: >-
      Name (key) where Trivy data should be stored in the GitHub cache

  scan-target:
    default: .
    description: >-
      What Trivy should scan

  scan-type:
    default: repository
    description: >-
      How Trivy should interpret scan-target; one of filesystem, image, repository, or sbom.

runs:
  using: composite
  steps:
    # Parse list inputs as separated by commas and spaces.
    # Select the maximum version-looking string from `inputs.setup`.
    - id: parsed
      shell: bash
      run: |
        # Validate inputs
        (
          <<< '${{ inputs.cache }}' jq -rRsS '"cache=\(split("[,\\s]+"; "") - [""])"'
          <<< '${{ inputs.setup }}' jq -rRsS '
            "setup=\(split("[,\\s]+"; "") - [""])",
            "version=\(split("[,\\s]+"; "") | max_by(split("[v.]"; "") | map(tonumber?)))"
          '
        ) | tee --append "${GITHUB_OUTPUT}"

    # Install Trivy as requested.
    # NOTE: `setup-trivy` can download a "latest" version but cannot cache it.
    - if: ${{ ! contains(fromJSON(steps.parsed.outputs.setup), 'none') }}
      uses: aquasecurity/setup-trivy@v0.2.4
      with:
        cache: ${{ contains(fromJSON(steps.parsed.outputs.setup), 'cache') }}
        version: ${{ steps.parsed.outputs.version }}

    # Restore a recent cache beginning with the prefix.
    - id: restore
      if: ${{ contains(fromJSON(steps.parsed.outputs.cache), 'restore') }}
      uses: actions/cache/restore@v4
      with:
        path: ${{ inputs.cache-directory }}
        key: ${{ inputs.cache-prefix }}-

    - id: trivy
      shell: bash
      env:
        TRIVY_CACHE_DIR: >-
          ${{ contains(fromJSON(steps.parsed.outputs.cache), 'use') && inputs.cache-directory || '' }}
        TRIVY_SKIP_CHECK_UPDATE: ${{ inputs.database == 'skip' }}
        TRIVY_SKIP_DB_UPDATE: ${{ inputs.database == 'skip' }}
        TRIVY_SKIP_JAVA_DB_UPDATE: ${{ inputs.database == 'skip' }}
        TRIVY_SKIP_VEX_REPO_UPDATE: ${{ inputs.database == 'skip' }}
      run: |
        # Run Trivy
        trivy '${{ inputs.scan-type }}' '${{ inputs.scan-target }}' || result=$?

        checksum=$([[ -z "${TRIVY_CACHE_DIR}" ]] || cat "${TRIVY_CACHE_DIR}/"*/metadata.json | sha256sum)
        echo 'cache-key=${{ inputs.cache-prefix }}-'"${checksum%% *}" >> "${GITHUB_OUTPUT}"

        exit "${result-0}"

    # Save updated data to the cache when requested.
    - if: >-
        ${{
          steps.restore.outcome == 'success' &&
          steps.restore.outputs.cache-matched-key == steps.trivy.outputs.cache-key
        }}
      shell: bash
      run: |
        # Cache hit on ${{ steps.restore.outputs.cache-matched-key }}
    - if: >-
        ${{
          steps.restore.outputs.cache-matched-key != steps.trivy.outputs.cache-key &&
          (
            (contains(fromJSON(steps.parsed.outputs.cache), 'save') && !cancelled()) ||
            (contains(fromJSON(steps.parsed.outputs.cache), 'success') && success())
          )
        }}
      uses: actions/cache/save@v4
      with:
        key: ${{ steps.trivy.outputs.cache-key }}
        path: ${{ inputs.cache-directory }}
