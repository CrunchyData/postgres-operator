  # FIXME: The repo key is obtained inelegantly.
  # The query below runs pgbackrest info and parses the output.
  # The --stanza argument matches DefaultStanzaName, defined in internal/pgbackrest/config.go.
  - sql: |
      DROP TABLE IF EXISTS pgbackrest_info;
      CREATE TEMPORARY TABLE pgbackrest_info (data json);

      COPY pgbackrest_info (data)
      FROM PROGRAM 'export LC_ALL=C && printf "\f" && pgbackrest info --log-level-console=info --log-level-stderr=warn --output=json --stanza=db && printf "\f"'
      WITH (FORMAT csv, HEADER false, QUOTE E'\f');

      WITH
      all_backups (data) AS (
        SELECT jsonb_array_elements(to_jsonb(data)) FROM pgbackrest_info
      ),
      stanza_backups (stanza, backup) AS (
        SELECT data->>'name', jsonb_array_elements(data->'backup') FROM all_backups
      ),
      ordered_backups (stanza, backup, seq_oldest, seq_newest) AS (
        SELECT stanza, backup,
          ROW_NUMBER() OVER (
            PARTITION BY stanza, backup->'database'->>'repo-key', backup->>'type'
            ORDER BY backup->'timestamp'->>'start' ASC, backup->'timestamp'->>'stop' ASC
          ),
          ROW_NUMBER() OVER (
            PARTITION BY stanza, backup->'database'->>'repo-key', backup->>'type'
            ORDER BY backup->'timestamp'->>'start' DESC, backup->'timestamp'->>'stop' DESC
          )
        FROM stanza_backups
      ),

      ccp_backrest_last_info AS (
        SELECT
          stanza,
          split_part(backup->'backrest'->>'version', '.', 1) || lpad(split_part(backup->'backrest'->>'version', '.', 2), 2, '0') || lpad(coalesce(nullif(split_part(backup->'backrest'->>'version', '.', 3), ''), '00'), 2, '0') AS backrest_repo_version,
          backup->'database'->>'repo-key' AS repo,
          backup->>'type' AS backup_type,
          backup->'info'->'repository'->>'delta' AS repo_backup_size_bytes,
          backup->'info'->'repository'->>'size' AS repo_total_size_bytes,
          (backup->'timestamp'->>'stop')::bigint - (backup->'timestamp'->>'start')::bigint AS backup_runtime_seconds,
          CASE WHEN backup->>'error' = 'true' THEN 1 ELSE 0 END AS backup_error
        FROM ordered_backups
        WHERE seq_newest = 1
      ),

      ccp_backrest_oldest_full_backup AS (
        SELECT
          stanza,
          backup->'database'->>'repo-key' AS repo,
          min((backup->'timestamp'->>'stop')::bigint) AS time_seconds
        FROM ordered_backups
        WHERE seq_oldest = 1 AND backup->>'type' IN ('full')
        GROUP BY 1,2
      ),

      ccp_backrest_last_full_backup AS (
        SELECT
          stanza,
          backup->'database'->>'repo-key' AS repo,
          EXTRACT(EPOCH FROM CURRENT_TIMESTAMP)::bigint - max((backup->'timestamp'->>'stop')::bigint) AS time_since_completion_seconds
        FROM ordered_backups
        WHERE seq_newest = 1 AND backup->>'type' IN ('full')
        GROUP BY 1,2
      ),

      ccp_backrest_last_diff_backup AS (
        SELECT
          stanza,
          backup->'database'->>'repo-key' AS repo,
          EXTRACT(EPOCH FROM CURRENT_TIMESTAMP)::bigint - max((backup->'timestamp'->>'stop')::bigint) AS time_since_completion_seconds
        FROM ordered_backups
        WHERE seq_newest = 1 AND backup->>'type' IN ('full','diff')
        GROUP BY 1,2
      ),

      ccp_backrest_last_incr_backup AS (
        SELECT
          stanza,
          backup->'database'->>'repo-key' AS repo,
          EXTRACT(EPOCH FROM CURRENT_TIMESTAMP)::bigint - max((backup->'timestamp'->>'stop')::bigint) AS time_since_completion_seconds
        FROM ordered_backups
        WHERE seq_newest = 1 AND backup->>'type' IN ('full','diff','incr')
        GROUP BY 1,2
      )

      SELECT
        ccp_backrest_last_diff_backup.time_since_completion_seconds as last_diff_backup,
        ccp_backrest_last_full_backup.time_since_completion_seconds as last_full_backup,
        ccp_backrest_last_incr_backup.time_since_completion_seconds as last_incr_backup,
        ccp_backrest_last_info.backrest_repo_version as last_info_backrest_repo_version,
        ccp_backrest_last_info.backup_error as last_info_backup_error,
        ccp_backrest_last_info.backup_type as backup_type,
        ccp_backrest_last_info.backup_runtime_seconds as backup_runtime_seconds,
        ccp_backrest_last_info.repo_backup_size_bytes as repo_backup_size_bytes,
        ccp_backrest_last_info.repo_total_size_bytes as repo_total_size_bytes,
        ccp_backrest_oldest_full_backup.time_seconds as oldest_full_backup,
        ccp_backrest_last_incr_backup.repo as repo
        
      FROM
        ccp_backrest_last_diff_backup
        , ccp_backrest_last_full_backup
        , ccp_backrest_last_incr_backup
        , ccp_backrest_last_info
        , ccp_backrest_oldest_full_backup;
    metrics:
      - metric_name: ccp_backrest_last_diff_backup_time_since_completion_seconds 
        description: Seconds since the last completed full or differential backup. Differential is always based off last full.
        value_column: last_diff_backup
        attribute_columns: ["repo"]
        static_attributes:
          server: "localhost:5432"
          stanza: "db"
      - metric_name: ccp_backrest_last_full_backup_time_since_completion_seconds 
        description: Seconds since the last completed full backup
        value_column: last_full_backup
        attribute_columns: ["repo"]
        static_attributes:
          server: "localhost:5432"
          stanza: "db"
      - metric_name: ccp_backrest_last_incr_backup_time_since_completion_seconds
        description: |
          Seconds since the last completed full, differential or incremental backup.
          Incremental is always based off last full or differential.
        value_column: last_incr_backup
        attribute_columns: ["repo"]
        static_attributes:
          server: "localhost:5432"
          stanza: "db"
      - metric_name: ccp_backrest_last_info_backrest_repo_version 
        description: pgBackRest version number when this backup was performed
        value_column: last_info_backrest_repo_version
        attribute_columns: ["backup_type", "repo"]
        static_attributes:
          server: "localhost:5432"
          stanza: "db"
      - metric_name: ccp_backrest_last_info_backup_error
        description: An error has been encountered in the backup. Check logs for more information.
        value_column: last_info_backup_error
        attribute_columns: ["backup_type", "repo"]
        static_attributes:
          server: "localhost:5432"
          stanza: "db"
      - metric_name: ccp_backrest_last_info_backup_runtime_seconds 
        description: Total runtime in seconds of this backup
        value_column: backup_runtime_seconds
        attribute_columns: ["backup_type", "repo"]
        static_attributes:
          server: "localhost:5432"
          stanza: "db"
      - metric_name: ccp_backrest_last_info_repo_backup_size_bytes
        description: Actual size of only this individual backup in the pgbackrest repository
        value_column: repo_backup_size_bytes
        attribute_columns: ["backup_type", "repo"]
        static_attributes:
          server: "localhost:5432"
          stanza: "db"
      - metric_name: ccp_backrest_last_info_repo_total_size_bytes
        description: Total size of this backup in the pgbackrest repository, including all required previous backups and WAL
        value_column: repo_total_size_bytes
        attribute_columns: ["backup_type", "repo"]
        static_attributes:
          server: "localhost:5432"
          stanza: "db"
      - metric_name: ccp_backrest_oldest_full_backup_time_seconds 
        description: Seconds since the oldest completed full backup
        value_column: oldest_full_backup
        attribute_columns: ["repo"]
        static_attributes:
          server: "localhost:5432"
