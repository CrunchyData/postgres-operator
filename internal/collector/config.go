// Copyright 2024 Crunchy Data Solutions, Inc.
//
// SPDX-License-Identifier: Apache-2.0

package collector

import (
	"k8s.io/apimachinery/pkg/util/sets"
	"sigs.k8s.io/yaml"
)

// ComponentID represents a component identifier within an OpenTelemetry
// Collector YAML configuration. Each value is a "type" followed by an optional
// slash-then-name: `type[/name]`
type ComponentID string

// Config represents an OpenTelemetry Collector YAML configuration.
// See: https://opentelemetry.io/docs/collector/configuration
type Config struct {
	Exporters  map[ComponentID]any
	Extensions map[ComponentID]any
	Processors map[ComponentID]any
	Receivers  map[ComponentID]any

	Pipelines map[PipelineID]Pipeline
}

// Pipeline represents the YAML configuration of a flow of telemetry data
// through an OpenTelemetry Collector.
// See: https://opentelemetry.io/docs/collector/configuration#pipelines
type Pipeline struct {
	Extensions []ComponentID
	Exporters  []ComponentID
	Processors []ComponentID
	Receivers  []ComponentID
}

// PipelineID represents a pipeline identifier within an OpenTelemetry Collector
// YAML configuration. Each value is a signal followed by an optional
// slash-then-name: `signal[/name]`
type PipelineID string

func (c *Config) ToYAML() (string, error) {
	const yamlGeneratedWarning = "" +
		"# Generated by postgres-operator. DO NOT EDIT.\n" +
		"# Your changes will not be saved.\n"

	extensions := sets.New[ComponentID]()
	pipelines := make(map[PipelineID]any, len(c.Pipelines))

	for id, p := range c.Pipelines {
		extensions.Insert(p.Extensions...)
		pipelines[id] = map[string]any{
			"exporters":  p.Exporters,
			"processors": p.Processors,
			"receivers":  p.Receivers,
		}
	}

	b, err := yaml.Marshal(map[string]any{
		"exporters":  c.Exporters,
		"extensions": c.Extensions,
		"processors": c.Processors,
		"receivers":  c.Receivers,
		"service": map[string]any{
			"extensions": sets.List(extensions), // Sorted
			"pipelines":  pipelines,
		},
	})
	return string(append([]byte(yamlGeneratedWarning), b...)), err
}

// NewConfig creates a base config for an OTel collector container
func NewConfig() *Config {
	return &Config{
		Exporters: map[ComponentID]any{
			// TODO: Do we want a DebugExporter outside of development?
			// https://pkg.go.dev/go.opentelemetry.io/collector/exporter/debugexporter#section-readme
			DebugExporter: map[string]any{"verbosity": "detailed"},
		},
		Extensions: map[ComponentID]any{},
		Processors: map[ComponentID]any{
			// https://pkg.go.dev/go.opentelemetry.io/collector/processor/batchprocessor#section-readme
			OneSecondBatchProcessor: map[string]any{"timeout": "1s"},
			SubSecondBatchProcessor: map[string]any{"timeout": "200ms"},

			// https://pkg.go.dev/github.com/open-telemetry/opentelemetry-collector-contrib/processor/groupbyattrsprocessor#readme-compaction
			CompactingProcessor: map[string]any{},
		},
		Receivers: map[ComponentID]any{},
		Pipelines: map[PipelineID]Pipeline{},
	}
}
