// Copyright 2024 - 2025 Crunchy Data Solutions, Inc.
//
// SPDX-License-Identifier: Apache-2.0

package collector

import (
	"context"
	"testing"

	"gotest.tools/v3/assert"

	"github.com/crunchydata/postgres-operator/internal/feature"
	"github.com/crunchydata/postgres-operator/pkg/apis/postgres-operator.crunchydata.com/v1beta1"
)

func TestEnablePgBouncerLogging(t *testing.T) {
	t.Run("NilInstrumentationSpec", func(t *testing.T) {
		gate := feature.NewGate()
		assert.NilError(t, gate.SetFromMap(map[string]bool{
			feature.OpenTelemetryLogs: true,
		}))
		ctx := feature.NewContext(context.Background(), gate)

		config := NewConfig(nil)

		EnablePgBouncerLogging(ctx, new(v1beta1.PostgresCluster), config)

		result, err := config.ToYAML()
		assert.NilError(t, err)
		assert.DeepEqual(t, result, `# Generated by postgres-operator. DO NOT EDIT.
# Your changes will not be saved.
exporters:
  debug:
    verbosity: detailed
extensions:
  file_storage/pgbouncer_logs:
    create_directory: true
    directory: /tmp/receiver
    fsync: true
processors:
  batch/1s:
    timeout: 1s
  batch/200ms:
    timeout: 200ms
  groupbyattrs/compact: {}
  resource/pgbouncer:
    attributes:
    - action: insert
      key: k8s.container.name
      value: pgbouncer
    - action: insert
      key: k8s.namespace.name
      value: ${env:K8S_POD_NAMESPACE}
    - action: insert
      key: k8s.pod.name
      value: ${env:K8S_POD_NAME}
  transform/pgbouncer_logs:
    log_statements:
    - context: log
      statements:
      - set(instrumentation_scope.name, "pgbouncer")
      - merge_maps(cache, ExtractPatterns(body, "^(?<timestamp>\\d{4}-\\d{2}-\\d{2}
        \\d{2}:\\d{2}:\\d{2}\\.\\d{3} [A-Z]{3}) \\[(?<pid>\\d+)\\] (?<log_level>[A-Z]+)
        (?<msg>.*$)"), "insert")
      - set(severity_text, cache["log_level"])
      - set(severity_number, SEVERITY_NUMBER_DEBUG)  where severity_text == "NOISE"
        or severity_text == "DEBUG"
      - set(severity_number, SEVERITY_NUMBER_INFO)   where severity_text == "LOG"
      - set(severity_number, SEVERITY_NUMBER_WARN)   where severity_text == "WARNING"
      - set(severity_number, SEVERITY_NUMBER_ERROR)  where severity_text == "ERROR"
      - set(severity_number, SEVERITY_NUMBER_FATAL)  where severity_text == "FATAL"
      - set(time, Time(cache["timestamp"], "%F %T.%L %Z"))
      - set(attributes["log.record.original"], body)
      - set(attributes["process.pid"], cache["pid"])
      - set(body, cache["msg"])
receivers:
  filelog/pgbouncer_log:
    include:
    - /tmp/*.log
    storage: file_storage/pgbouncer_logs
service:
  extensions:
  - file_storage/pgbouncer_logs
  pipelines:
    logs/pgbouncer:
      exporters:
      - debug
      processors:
      - resource/pgbouncer
      - transform/pgbouncer_logs
      - batch/200ms
      - groupbyattrs/compact
      receivers:
      - filelog/pgbouncer_log
`)
	})

	t.Run("InstrumentationSpecDefined", func(t *testing.T) {
		gate := feature.NewGate()
		assert.NilError(t, gate.SetFromMap(map[string]bool{
			feature.OpenTelemetryLogs: true,
		}))
		ctx := feature.NewContext(context.Background(), gate)

		config := NewConfig(testInstrumentationSpec())

		cluster := new(v1beta1.PostgresCluster)
		cluster.Spec.Instrumentation = testInstrumentationSpec()

		EnablePgBouncerLogging(ctx, cluster, config)

		result, err := config.ToYAML()
		assert.NilError(t, err)
		assert.DeepEqual(t, result, `# Generated by postgres-operator. DO NOT EDIT.
# Your changes will not be saved.
exporters:
  debug:
    verbosity: detailed
  googlecloud:
    log:
      default_log_name: opentelemetry.io/collector-exported-log
    project: google-project-name
extensions:
  file_storage/pgbouncer_logs:
    create_directory: true
    directory: /tmp/receiver
    fsync: true
processors:
  batch/1s:
    timeout: 1s
  batch/200ms:
    timeout: 200ms
  groupbyattrs/compact: {}
  resource/pgbouncer:
    attributes:
    - action: insert
      key: k8s.container.name
      value: pgbouncer
    - action: insert
      key: k8s.namespace.name
      value: ${env:K8S_POD_NAMESPACE}
    - action: insert
      key: k8s.pod.name
      value: ${env:K8S_POD_NAME}
  transform/pgbouncer_logs:
    log_statements:
    - context: log
      statements:
      - set(instrumentation_scope.name, "pgbouncer")
      - merge_maps(cache, ExtractPatterns(body, "^(?<timestamp>\\d{4}-\\d{2}-\\d{2}
        \\d{2}:\\d{2}:\\d{2}\\.\\d{3} [A-Z]{3}) \\[(?<pid>\\d+)\\] (?<log_level>[A-Z]+)
        (?<msg>.*$)"), "insert")
      - set(severity_text, cache["log_level"])
      - set(severity_number, SEVERITY_NUMBER_DEBUG)  where severity_text == "NOISE"
        or severity_text == "DEBUG"
      - set(severity_number, SEVERITY_NUMBER_INFO)   where severity_text == "LOG"
      - set(severity_number, SEVERITY_NUMBER_WARN)   where severity_text == "WARNING"
      - set(severity_number, SEVERITY_NUMBER_ERROR)  where severity_text == "ERROR"
      - set(severity_number, SEVERITY_NUMBER_FATAL)  where severity_text == "FATAL"
      - set(time, Time(cache["timestamp"], "%F %T.%L %Z"))
      - set(attributes["log.record.original"], body)
      - set(attributes["process.pid"], cache["pid"])
      - set(body, cache["msg"])
receivers:
  filelog/pgbouncer_log:
    include:
    - /tmp/*.log
    storage: file_storage/pgbouncer_logs
service:
  extensions:
  - file_storage/pgbouncer_logs
  pipelines:
    logs/pgbouncer:
      exporters:
      - googlecloud
      processors:
      - resource/pgbouncer
      - transform/pgbouncer_logs
      - batch/200ms
      - groupbyattrs/compact
      receivers:
      - filelog/pgbouncer_log
`)
	})
}
