[{"metrics":[{"attribute_columns":["repo"],"description":"Seconds since the last completed full or differential backup. Differential is always based off last full.","metric_name":"ccp_backrest_last_diff_backup_time_since_completion_seconds","static_attributes":{"server":"localhost:5432","stanza":"db"},"value_column":"last_diff_backup"},{"attribute_columns":["repo"],"description":"Seconds since the last completed full backup","metric_name":"ccp_backrest_last_full_backup_time_since_completion_seconds","static_attributes":{"server":"localhost:5432","stanza":"db"},"value_column":"last_full_backup"},{"attribute_columns":["repo"],"description":"Seconds since the last completed full, differential or incremental backup.\nIncremental is always based off last full or differential.\n","metric_name":"ccp_backrest_last_incr_backup_time_since_completion_seconds","static_attributes":{"server":"localhost:5432","stanza":"db"},"value_column":"last_incr_backup"},{"attribute_columns":["backup_type","repo"],"description":"pgBackRest version number when this backup was performed","metric_name":"ccp_backrest_last_info_backrest_repo_version","static_attributes":{"server":"localhost:5432","stanza":"db"},"value_column":"last_info_backrest_repo_version"},{"attribute_columns":["backup_type","repo"],"description":"An error has been encountered in the backup. Check logs for more information.","metric_name":"ccp_backrest_last_info_backup_error","static_attributes":{"server":"localhost:5432","stanza":"db"},"value_column":"last_info_backup_error"},{"attribute_columns":["backup_type","repo"],"description":"Total runtime in seconds of this backup","metric_name":"ccp_backrest_last_info_backup_runtime_seconds","static_attributes":{"server":"localhost:5432","stanza":"db"},"value_column":"backup_runtime_seconds"},{"attribute_columns":["backup_type","repo"],"description":"Actual size of only this individual backup in the pgbackrest repository","metric_name":"ccp_backrest_last_info_repo_backup_size_bytes","static_attributes":{"server":"localhost:5432","stanza":"db"},"value_column":"repo_backup_size_bytes"},{"attribute_columns":["backup_type","repo"],"description":"Total size of this backup in the pgbackrest repository, including all required previous backups and WAL","metric_name":"ccp_backrest_last_info_repo_total_size_bytes","static_attributes":{"server":"localhost:5432","stanza":"db"},"value_column":"repo_total_size_bytes"},{"attribute_columns":["repo"],"description":"Seconds since the oldest completed full backup","metric_name":"ccp_backrest_oldest_full_backup_time_seconds","static_attributes":{"server":"localhost:5432"},"value_column":"oldest_full_backup"}],"sql":"DROP TABLE IF EXISTS pgbackrest_info;\nCREATE TEMPORARY TABLE pgbackrest_info (data json);\n\nCOPY pgbackrest_info (data)\nFROM PROGRAM 'export LC_ALL=C \u0026\u0026 printf \"\\f\" \u0026\u0026 pgbackrest info --log-level-console=info --log-level-stderr=warn --output=json --stanza=db \u0026\u0026 printf \"\\f\"'\nWITH (FORMAT csv, HEADER false, QUOTE E'\\f');\n\nWITH\nall_backups (data) AS (\n  SELECT jsonb_array_elements(to_jsonb(data)) FROM pgbackrest_info\n),\nstanza_backups (stanza, backup) AS (\n  SELECT data-\u003e\u003e'name', jsonb_array_elements(data-\u003e'backup') FROM all_backups\n),\nordered_backups (stanza, backup, seq_oldest, seq_newest) AS (\n  SELECT stanza, backup,\n    ROW_NUMBER() OVER (\n      PARTITION BY stanza, backup-\u003e'database'-\u003e\u003e'repo-key', backup-\u003e\u003e'type'\n      ORDER BY backup-\u003e'timestamp'-\u003e\u003e'start' ASC, backup-\u003e'timestamp'-\u003e\u003e'stop' ASC\n    ),\n    ROW_NUMBER() OVER (\n      PARTITION BY stanza, backup-\u003e'database'-\u003e\u003e'repo-key', backup-\u003e\u003e'type'\n      ORDER BY backup-\u003e'timestamp'-\u003e\u003e'start' DESC, backup-\u003e'timestamp'-\u003e\u003e'stop' DESC\n    )\n  FROM stanza_backups\n),\n\nccp_backrest_last_info AS (\n  SELECT\n    stanza,\n    split_part(backup-\u003e'backrest'-\u003e\u003e'version', '.', 1) || lpad(split_part(backup-\u003e'backrest'-\u003e\u003e'version', '.', 2), 2, '0') || lpad(coalesce(nullif(split_part(backup-\u003e'backrest'-\u003e\u003e'version', '.', 3), ''), '00'), 2, '0') AS backrest_repo_version,\n    backup-\u003e'database'-\u003e\u003e'repo-key' AS repo,\n    backup-\u003e\u003e'type' AS backup_type,\n    backup-\u003e'info'-\u003e'repository'-\u003e\u003e'delta' AS repo_backup_size_bytes,\n    backup-\u003e'info'-\u003e'repository'-\u003e\u003e'size' AS repo_total_size_bytes,\n    (backup-\u003e'timestamp'-\u003e\u003e'stop')::bigint - (backup-\u003e'timestamp'-\u003e\u003e'start')::bigint AS backup_runtime_seconds,\n    CASE WHEN backup-\u003e\u003e'error' = 'true' THEN 1 ELSE 0 END AS backup_error\n  FROM ordered_backups\n  WHERE seq_newest = 1\n),\n\nccp_backrest_oldest_full_backup AS (\n  SELECT\n    stanza,\n    backup-\u003e'database'-\u003e\u003e'repo-key' AS repo,\n    min((backup-\u003e'timestamp'-\u003e\u003e'stop')::bigint) AS time_seconds\n  FROM ordered_backups\n  WHERE seq_oldest = 1 AND backup-\u003e\u003e'type' IN ('full')\n  GROUP BY 1,2\n),\n\nccp_backrest_last_full_backup AS (\n  SELECT\n    stanza,\n    backup-\u003e'database'-\u003e\u003e'repo-key' AS repo,\n    EXTRACT(EPOCH FROM CURRENT_TIMESTAMP)::bigint - max((backup-\u003e'timestamp'-\u003e\u003e'stop')::bigint) AS time_since_completion_seconds\n  FROM ordered_backups\n  WHERE seq_newest = 1 AND backup-\u003e\u003e'type' IN ('full')\n  GROUP BY 1,2\n),\n\nccp_backrest_last_diff_backup AS (\n  SELECT\n    stanza,\n    backup-\u003e'database'-\u003e\u003e'repo-key' AS repo,\n    EXTRACT(EPOCH FROM CURRENT_TIMESTAMP)::bigint - max((backup-\u003e'timestamp'-\u003e\u003e'stop')::bigint) AS time_since_completion_seconds\n  FROM ordered_backups\n  WHERE seq_newest = 1 AND backup-\u003e\u003e'type' IN ('full','diff')\n  GROUP BY 1,2\n),\n\nccp_backrest_last_incr_backup AS (\n  SELECT\n    stanza,\n    backup-\u003e'database'-\u003e\u003e'repo-key' AS repo,\n    EXTRACT(EPOCH FROM CURRENT_TIMESTAMP)::bigint - max((backup-\u003e'timestamp'-\u003e\u003e'stop')::bigint) AS time_since_completion_seconds\n  FROM ordered_backups\n  WHERE seq_newest = 1 AND backup-\u003e\u003e'type' IN ('full','diff','incr')\n  GROUP BY 1,2\n)\n\nSELECT\n  ccp_backrest_last_diff_backup.time_since_completion_seconds as last_diff_backup,\n  ccp_backrest_last_full_backup.time_since_completion_seconds as last_full_backup,\n  ccp_backrest_last_incr_backup.time_since_completion_seconds as last_incr_backup,\n  ccp_backrest_last_info.backrest_repo_version as last_info_backrest_repo_version,\n  ccp_backrest_last_info.backup_error as last_info_backup_error,\n  ccp_backrest_last_info.backup_type as backup_type,\n  ccp_backrest_last_info.backup_runtime_seconds as backup_runtime_seconds,\n  ccp_backrest_last_info.repo_backup_size_bytes as repo_backup_size_bytes,\n  ccp_backrest_last_info.repo_total_size_bytes as repo_total_size_bytes,\n  ccp_backrest_oldest_full_backup.time_seconds as oldest_full_backup,\n  ccp_backrest_last_incr_backup.repo as repo\n  \nFROM\n  ccp_backrest_last_diff_backup\n  , ccp_backrest_last_full_backup\n  , ccp_backrest_last_incr_backup\n  , ccp_backrest_last_info\n  , ccp_backrest_oldest_full_backup;\n"}]
