# This list of queries configures an OTel SQL Query Receiver to read pgMonitor
# metrics from Postgres.
#
# https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/-/receiver/sqlqueryreceiver#metrics-queries
# https://github.com/CrunchyData/pgmonitor/blob/development/sql_exporter/common/crunchy_global_collector.yml

# NOTE: Some of the columns below can return NULL values, for which sqlqueryreceiver will warn.
# https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/sqlqueryreceiver#null-values
# Those columns are idx_scan and idx_tup_fetch and we avoid NULL by using COALESCE.
  - sql: >
      SELECT
        current_database() as dbname
        , p.schemaname
        , p.relname
        , p.seq_scan
        , p.seq_tup_read
        , COALESCE(p.idx_scan, 0) AS idx_scan
        , COALESCE(p.idx_tup_fetch, 0) as idx_tup_fetch
        , p.n_tup_ins
        , p.n_tup_upd
        , p.n_tup_del
        , p.n_tup_hot_upd
        , 0::bigint AS n_tup_newpage_upd
        , p.n_live_tup
        , p.n_dead_tup
        , p.vacuum_count
        , p.autovacuum_count
        , p.analyze_count
        , p.autoanalyze_count
      FROM pg_catalog.pg_stat_user_tables p;
    metrics:
      - metric_name: ccp_stat_user_tables_analyze_count 
        data_type: sum
        value_column: analyze_count
        description: Number of times this table has been manually analyzed
        attribute_columns: ["dbname", "relname", "schemaname"]
        static_attributes:
          server: "localhost:5432"
      - metric_name: ccp_stat_user_tables_autoanalyze_count 
        data_type: sum
        value_column: autoanalyze_count
        description: Number of times this table has been analyzed by the autovacuum daemon
        attribute_columns: ["dbname", "relname", "schemaname"]
        static_attributes:
          server: "localhost:5432"
      - metric_name: ccp_stat_user_tables_autovacuum_count 
        data_type: sum
        value_column: autovacuum_count
        description: Number of times this table has been vacuumed by the autovacuum daemon
        attribute_columns: ["dbname", "relname", "schemaname"]
        static_attributes:
          server: "localhost:5432"
      - metric_name: ccp_stat_user_tables_idx_scan 
        data_type: sum
        value_column: idx_scan
        description: Number of index scans initiated on this table
        attribute_columns: ["dbname", "relname", "schemaname"]
        static_attributes:
          server: "localhost:5432"
      - metric_name: ccp_stat_user_tables_idx_tup_fetch 
        data_type: sum
        value_column: idx_tup_fetch
        description: Number of live rows fetched by index scans
        attribute_columns: ["dbname", "relname", "schemaname"]
        static_attributes:
          server: "localhost:5432"
      - metric_name: ccp_stat_user_tables_n_dead_tup 
        value_column: n_dead_tup
        description: Estimated number of dead rows
        attribute_columns: ["dbname", "relname", "schemaname"]
        static_attributes:
          server: "localhost:5432"
      # FIXME: This metric returns 0, when the query returns 1 for relname="pgbackrest_info",schemaname="pg_temp_33".
      # The issue doesn't occur with gte_pg16.
      - metric_name: ccp_stat_user_tables_n_live_tup 
        value_column: n_live_tup
        description: Estimated number of live rows
        attribute_columns: ["dbname", "relname", "schemaname"]
        static_attributes:
          server: "localhost:5432"
      - metric_name: ccp_stat_user_tables_n_tup_del 
        data_type: sum
        value_column: n_tup_del
        description: Number of rows deleted
        attribute_columns: ["dbname", "relname", "schemaname"]
        static_attributes:
          server: "localhost:5432"
      - metric_name: ccp_stat_user_tables_n_tup_hot_upd 
        data_type: sum
        value_column: n_tup_hot_upd
        description: Number of rows HOT updated (i.e., with no separate index update required)
        attribute_columns: ["dbname", "relname", "schemaname"]
        static_attributes:
          server: "localhost:5432"
      # FIXME: This metric returns 0, when the query returns 1 for relname="pgbackrest_info",schemaname="pg_temp_33".
      # The issue doesn't occur with gte_pg16.
      - metric_name: ccp_stat_user_tables_n_tup_ins 
        data_type: sum
        value_column: n_tup_ins
        description: Number of rows inserted
        attribute_columns: ["dbname", "relname", "schemaname"]
        static_attributes:
          server: "localhost:5432"
      - metric_name: ccp_stat_user_tables_n_tup_upd 
        data_type: sum
        value_column: n_tup_upd
        description: Number of rows updated
        attribute_columns: ["dbname", "relname", "schemaname"]
        static_attributes:
          server: "localhost:5432"
      # FIXME: This metric returns 0, when the query returns 1 for relname="pgbackrest_info",schemaname="pg_temp_33".
      # The issue doesn't occur with gte_pg16.
      - metric_name: ccp_stat_user_tables_seq_scan 
        data_type: sum
        value_column: seq_scan
        description: Number of sequential scans initiated on this table
        attribute_columns: ["dbname", "relname", "schemaname"]
        static_attributes:
          server: "localhost:5432"
      # FIXME: This metric returns 0, when the query returns 1 for relname="pgbackrest_info",schemaname="pg_temp_33".
      # The issue doesn't occur with gte_pg16.
      - metric_name: ccp_stat_user_tables_seq_tup_read 
        data_type: sum
        value_column: seq_tup_read
        description: Number of live rows fetched by sequential scans
        attribute_columns: ["dbname", "relname", "schemaname"]
        static_attributes:
          server: "localhost:5432"
      - metric_name: ccp_stat_user_tables_vacuum_count 
        data_type: sum
        value_column: vacuum_count
        description: Number of times this table has been manually vacuumed (not counting VACUUM FULL)
        attribute_columns: ["dbname", "relname", "schemaname"]
        static_attributes:
          server: "localhost:5432"

  - sql: >
      SELECT
          s.slot_name
          , s.active::int
          , COALESCE(pg_wal_lsn_diff(CASE WHEN pg_is_in_recovery() THEN pg_last_wal_replay_lsn() ELSE pg_current_wal_insert_lsn() END, s.restart_lsn), 0) AS retained_bytes
          , COALESCE(s.database, '')
          , s.slot_type
          , 0 AS conflicting
          , 0 AS failover
          , 0 AS synced
      FROM pg_catalog.pg_replication_slots s;
    metrics:
      - metric_name: ccp_replication_slots_active
        value_column: active
        description: Active state of slot. 1 = true. 0 = false.
        attribute_columns: ["database", "slot_name", "slot_type"]
        static_attributes:
          server: "localhost:5432"
      - metric_name: ccp_replication_slots_retained_bytes
        value_column: retained_bytes
        description: The amount of WAL (in bytes) being retained for this slot
        attribute_columns: ["database", "slot_name", "slot_type"]
        static_attributes:
          server: "localhost:5432"
      - metric_name: ccp_replication_slots_conflicting
        value_column: conflicting
        description: True if this logical slot conflicted with recovery (and so is now invalidated). When this column is true, check invalidation_reason column for the conflict reason. Always NULL for physical slots.
        attribute_columns: ["database", "slot_name", "slot_type"]
        static_attributes:
          server: "localhost:5432"
      - metric_name: ccp_replication_slots_failover
        value_column: failover
        description: True if this is a logical slot enabled to be synced to the standbys so that logical replication can be resumed from the new primary after failover. Always false for physical slots.
        attribute_columns: ["database", "slot_name", "slot_type"]
        static_attributes:
          server: "localhost:5432"
      - metric_name: ccp_replication_slots_synced
        value_column: synced
        description: True if this is a logical slot that was synced from a primary server. On a hot standby, the slots with the synced column marked as true can neither be used for logical decoding nor dropped manually. The value of this column has no meaning on the primary server; the column value on the primary is default false for all slots but may (if leftover from a promoted standby) also be true.
        attribute_columns: ["database", "slot_name", "slot_type"]
        static_attributes:
          server: "localhost:5432"
