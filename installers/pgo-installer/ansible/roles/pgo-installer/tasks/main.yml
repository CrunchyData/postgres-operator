---
- name: Set output directory fact
  set_fact:
    output_dir: "{{ ansible_env.HOME }}/.pgo/{{ pgo_installer_namespace }}/output"
  tags: 
    - always

- name: Ensure output directory exists
  file:
    path: "{{ output_dir }}"
    state: directory
    mode: 0700
  tags:
    - always

- include_vars: openshift.yml
  when: pgo_installer_environment == 'openshift'
  tags:
    - always

- name: Use kubectl or oc
  set_fact:
    kubectl_or_oc: "{{ openshift_oc_bin if openshift_oc_bin is defined else 'kubectl' }}"
  tags:
    - always

- name: Clean all jobs
  set_fact:
    job: "all"
  tags:
    - always

- name: Check Run Setup
  set_fact:
    run_setup: true
  tags:
    - install-container
    - uninstall-container
    - update-container

- name: Setup Install Container
  when: run_setup | default(False) | bool
  tags:
    - always
  block:
  - name: Check Install Namespace
    when: not (create_pgo_installer_namespace | default(False) | bool)
    shell: "{{ kubectl_or_oc }} get namespace {{ pgo_installer_namespace }}"
  
  - name: Create Install Namespace
    when: create_pgo_installer_namespace | default(False) | bool
    shell: "{{ kubectl_or_oc }} create namespace {{ pgo_installer_namespace }}"

  - name: Check PGO-Install Service Account
    when:
      - use_cluster_admin | default(False) | bool
      - not (create_pgo_installer_service_account | default(False) | bool)
    shell: "{{ kubectl_or_oc }} get serviceaccount {{ pgo_installer_sa }} -n {{ pgo_installer_namespace }}"

  - name: Create PGO-Install Service Account
    when:
      - use_cluster_admin | default(False) | bool
      - create_pgo_installer_service_account | default(False) | bool
    shell: "{{ kubectl_or_oc }} create serviceaccount {{ pgo_installer_sa }} -n {{ pgo_installer_namespace }}"

  - name: Check PGO-Installer Cluster Role Binding
    when:
      - use_cluster_admin | default(False) | bool
      - not (create_pgo_installer_clusterrolebinding | default(False) | bool)
    shell: "{{ kubectl_or_oc }} get clusterrolebinding {{ pgo_installer_crb }}"

  - name: Create PGO-Installer Cluster Role Binding
    when:
      - use_cluster_admin | default(False) | bool
      - create_pgo_installer_clusterrolebinding | default(False) | bool
    shell: "{{ kubectl_or_oc }} create clusterrolebinding {{ pgo_installer_crb }} --clusterrole={{ pgo_installer_role }} --serviceaccount={{ pgo_installer_namespace }}:{{ pgo_installer_sa }}"

  - name: Check Inventory Config Map
    when:
      - not (create_pgo_installer_configmap | default(False) | bool)
    shell: "{{ kubectl_or_oc }} get configmap {{ pgo_installer_configmap }} -n {{ pgo_installer_namespace }}"

  - name: Create Inventory Config Map
    when:
      - create_pgo_installer_configmap | default(False) | bool
    shell: "{{ kubectl_or_oc }} create configmap {{ pgo_installer_configmap }} -n {{ pgo_installer_namespace }} --from-file=inventory={{ inventory_dir }}/inventory"

- name: Run Install Job
  tags:
    - install-container
  block:
    - name:
      set_fact:
        job: "install"
    - name: Template Install Job Json
      template:
        src: pgo-installer-job.json.j2
        dest: "{{ output_dir }}/pgo-installer-job.json"
        mode: '0600'
    - name: Create Install Job
      shell: "{{ kubectl_or_oc }} create -n {{ pgo_installer_namespace }} -f {{ output_dir }}/pgo-installer-job.json"
      register: job_started
    - name: Wait for Install Job
      when: job_started != 0
      shell: "{{ kubectl_or_oc }} wait -n {{ pgo_installer_namespace }} --timeout={{ job_wait_timeout }} --for=condition=Complete jobs.batch/pgo-installer"
  rescue: 
    - debug:
        msg: Install failed

- name: Run Uninstall Job
  tags:
    - uninstall-container
  block:
    - name:
      set_fact:
        job: "uninstall"
    - name: Template Uninstall Job Json
      template:
        src: pgo-uninstaller-job.json.j2
        dest: "{{ output_dir }}/pgo-uninstaller-job.json"
        mode: '0600'
    - name: Create Uninstall Job
      shell: "{{ kubectl_or_oc }} create -n {{ pgo_installer_namespace }} -f {{ output_dir }}/pgo-uninstaller-job.json"
      register: job_started
    - name: Wait for Uninstall Job
      when: job_started != 0
      shell: "{{ kubectl_or_oc }} wait -n {{ pgo_installer_namespace }} --timeout={{ job_wait_timeout }} --for=condition=Complete jobs.batch/pgo-uninstaller"
  rescue:
    - debug:
        msg: Uninstall failed

- name: Run Update Job
  tags:
    - update-container
  block:
    - name:
      set_fact:
        job: "update"
    - name: Template Update Job Json
      template:
        src: pgo-update-job.json.j2
        dest: "{{ output_dir }}/pgo-update-job.json"
        mode: '0600'
    - name: Create Update Job
      shell: "{{ kubectl_or_oc }} create -n {{ pgo_installer_namespace }} -f {{ output_dir }}/pgo-update-job.json"
      register: job_started
    - name: Wait for Update Job
      when: job_started != 0
      shell: "{{ kubectl_or_oc }} wait -n {{ pgo_installer_namespace }} --timeout={{ job_wait_timeout }} --for=condition=Complete jobs.batch/pgo-updater"
  rescue:
    - debug:
        msg: Update failed


- name: Cleanup Jobs
  tags:
    - clean
  block:
    - name: Clean Update Job
      shell: "{{ kubectl_or_oc }} delete -n {{ pgo_installer_namespace }} jobs.batch/pgo-updater"
      when: job == 'update' or job == 'all'
      ignore_errors: yes
    - name: Clean Installer Job
      shell: "{{ kubectl_or_oc }} delete -n {{ pgo_installer_namespace }} jobs.batch/pgo-installer"
      when: job == 'install'  or job == 'all'
      ignore_errors: yes
    - name: Clean Uninstaller Job
      shell: "{{ kubectl_or_oc }} delete -n {{ pgo_installer_namespace }} jobs.batch/pgo-uninstaller"
      when: job == 'uninstall'  or job == 'all'
      ignore_errors: yes

- name: Clean All
  tags:
    - clean-all
  block:
    - name: Clean namespace
      shell: "{{ kubectl_or_oc }} delete namespace {{ pgo_installer_namespace }}"
      ignore_errors: yes
    - name: Clean clusterrolebinding
      shell: "{{ kubectl_or_oc }} delete clusterrolebinding {{ pgo_installer_crb }}"
      ignore_errors: yes