---
- name: Set Metrics Directory Fact
  set_fact:
    metrics_dir: "{{ ansible_env.HOME }}/.pgo/metrics/{{ metrics_namespace }}"
  tags: always

- name: Ensure Output Directory Exists
  file:
    path: "{{ metrics_dir }}"
    state: directory
    mode: 0700
  tags: always

- include_tasks: "{{ tasks }}"
  loop:
    - openshift_auth.yml
    - openshift.yml
  loop_control:
    loop_var: tasks
  when: openshift_host != ''
  tags: always

- include_tasks: "{{ tasks }}"
  loop:
    - kubernetes_auth.yml
    - kubernetes.yml
  loop_control:
    loop_var: tasks
  when: kubernetes_context != '' or kubernetes_in_cluster | bool
  tags: always

- name: Use kubectl or oc
  set_fact:
    kubectl_or_oc: "{{ openshift_oc_bin if openshift_oc_bin is defined else 'kubectl' }}"
  tags: always

- include_tasks: cleanup.yml
  tags:
    - update-metrics
    - uninstall-metrics

- include_tasks: kubernetes_cleanup.yml
  when: kubernetes_context != '' or kubernetes_in_cluster | bool
  tags:
    - uninstall-metrics

- include_tasks: openshift_cleanup.yml
  when: openshift_host != ''
  tags:
    - uninstall-metrics

- name: Install Crunchy PostgreSQL Operator Metrics
  tags:
    - install-metrics
    - update-metrics
  block:
    - name: Download pgmonitor {{ pgmonitor_version }}
      get_url:
        url: https://github.com/CrunchyData/pgmonitor/archive/{{ pgmonitor_version }}.tar.gz
        dest: "{{ metrics_dir }}"
        mode: "0600"

    - name: Extract pgmonitor
      unarchive:
        src: "{{ metrics_dir }}/pgmonitor-{{ pgmonitor_version | replace('v','') }}.tar.gz"
        dest: "{{ metrics_dir }}"

    - name: Create Metrics Image Pull Secret
      shell: >
        {{ kubectl_or_oc }} -n {{ metrics_namespace }} get secret/{{ metrics_image_pull_secret }} -o jsonpath='{""}' 2> /dev/null ||
        {{ kubectl_or_oc }} -n {{ metrics_namespace }} create -f {{ metrics_image_pull_secret_manifest }}
      when:
        - create_rbac | bool
        - metrics_image_pull_secret_manifest != ''

    - include_tasks: prometheus.yml
      when: prometheus_install | bool

    - include_tasks: grafana.yml
      when: grafana_install | bool

    - name: Set Metrics Deployments Fact
      set_fact: deployments="{{ deployments | default([]) + [ item.name ] }}"
      when: item.deployed
      loop:
        - { deployed: "{{ prometheus_install | bool }}", name: "crunchy-prometheus" }
        - { deployed: "{{ grafana_install | bool }}", name: "crunchy-grafana" }

    - name: Wait for Metrics to Finish Deploying
      command: "{{ kubectl_or_oc }} rollout status deployment/{{ item }} -n {{ metrics_namespace }} --timeout=600s"
      async: 610  # must be > or = to the rollout status timeout (600s) to ensure proper timeout behavior
      poll: 0
      loop: "{{ deployments }}"
      register: deployment_results

    - name: Check Metrics Deployment Status
      async_status:
        jid: "{{ item.ansible_job_id }}"
      loop: "{{ deployment_results.results }}"
      register: deployment_poll_results
      until: deployment_poll_results.finished
      retries: 60
      delay: 10
