localhost ansible_connection=local ansible_python_interpreter="/usr/bin/env python"

[all:vars]

crunchy_debug='false'

# ==================
# Installation Methods
# One of the following blocks must be updated:
# - Deploy into Kubernetes
# - Deploy into Openshift

# Deploy into Openshift
# ==================
# Note: openshift_host can use the format https://URL:PORT
# Note: openshift_token can be used for token authentication
# ==================
# openshift_host=''
# openshift_skip_tls_verify=true
# openshift_user=''
# openshift_password=''
# openshift_token=''

# Deploy into Kubernetes
# ==================
# Note: Context name can be found using:
#   kubectl config current-context
# ==================
# kubernetes_context=''

# Create RBAC
# ==================
# Note: you may disable creating RBAC resources if they where already
# provisoned by a cluster admin.
# ==================
create_rbac='true'

# Namespace Mode
# ==================
# Note: this setting is only applicable if 'create_rbac=true'.
#
# When installing RBAC using 'create_rbac', the namespace mode determines
# what Cluster Roles are installed.  The default mode if a value is not
# specified here is "dynamic", which gives the Operator the full set of
# Cluster Roles to create/modify/delete namespaces, and also install RBAC
# within those namespaces in order to create PG clusters.  A value of
# "readonly" can also be specified, which allows the Operator to view
# namespaces, but not create/modify/delete them nor create  RBAC within
# them.  And finally "disabled" prevents the creation of any Cluster Roles,
# and therefore disables all namespace functionality.
# ==================
# namespace_mode='dynamic'

# ===================
# PGO Client Container Settings
# The following settings configure the deployment of a PGO Client Container
# ===================
# PGO Client Container Install
#pgo_client_container_install='false'

# PGO Apiserver URL - Url to be used to connect to the operator service
#pgo_apiserver_url='https://postgres-operator'

# PGO Client Secret
#pgo_client_cert_secret='pgo.tls'

# ===================
# PGO Settings
# The following settings configure the Crunchy PostgreSQL Operator
# functionality.
# ===================

# The name of the PGO installation
pgo_installation_name='devtest'

# PGO Admin Credentials
pgo_admin_username='admin'
pgo_admin_password=''

# PGO Admin Role & Permissions
pgo_admin_role_name='pgoadmin'
pgo_admin_perms='*'

# Namespace where operator will be deployed
# NOTE: Ansible will create namespaces that don't exist
pgo_operator_namespace='pgo'

# Comma separated list of namespaces Operator will manage
# NOTE: Ansible will create namespaces that don't exist
namespace='pgouser1,pgouser2'

# Crunchy Container Suite images to use. The tags centos7 and rhel7 are acceptable.
# CentOS7 images can be found in dockerhub: https://hub.docker.com/u/crunchydata
# RHEL7 images are available to Crunchy customers: https://access.crunchydata.com/login/
ccp_image_prefix='registry.developers.crunchydata.com/crunchydata'
ccp_image_tag='centos7-12.2-4.3.0'

# Name of a Secret containing credentials for container image registries.
# Provide a path to the Secret manifest to be installed in each namespace. (optional)
ccp_image_pull_secret=''
ccp_image_pull_secret_manifest=''

# Crunchy PostgreSQL Operator images to use.  The tags centos7 and rhel7 are acceptable.
pgo_image_prefix='registry.developers.crunchydata.com/crunchydata'
pgo_image_tag='centos7-4.3.0'

# Name of a Secret containing credentials for container image registries.
# Provide a path to the Secret manifest to be installed in each namespace. (optional)
#pgo_image_pull_secret=''
#pgo_image_pull_secret_manifest=''

# PGO Client Install
pgo_client_install='true'
pgo_client_version='v4.3.0'

# PGO Apiserver TLS Settings
#pgo_tls_no_verify='false'
#pgo_disable_tls='false'
#pgo_apiserver_port=8443
#pgo_tls_ca_store=''
#pgo_add_os_ca_store='false'
#pgo_noauth_routes=''

# PGO Event Settings
#pgo_disable_eventing='false'

# Set to 'true' to assign the cluster-admin role to the PGO service account.
# Needed for OCP installs to enable dynamic namespace creation
#  (see the PGO docs for more details).
#pgo_cluster_admin='false'

# This will set default enhancements for operator deployed PostgreSQL clusters
backrest='true'
badger='false'
metrics='false'
sync_replication='false'

# This is used if one wants to disable the setting of the fsGroup for PostgreSQL
# which can occur in the default "restricted" deployment of OpenShift
disable_fsgroup='false'

# This will set the default pod anti-affinity for the deployed PostgreSQL
# clusters. Pod Anti-Affinity is set to determine where the PostgreSQL Pods are
# deployed relative to each other There are three levels:
#
# - required: Pods *must* be scheduled to different Nodes. If a Pod cannot be
#   scheduled to a different Node from the other Pods in the anti-affinity
#   group, then it will not be scheduled.
# - preferred (default): Pods *should* be scheduled to different Nodes. There is
#   a chance that two Pods in the same anti-affinity group could be scheduled to
#   the same node
# - disabled: Pods do not have any anti-affinity rules
#
# The `pod_anti_affinity` label sets the Pod anti-affinity for all of the Pods
# that are managed by the Operator in a PostgreSQL cluster. In addition to the
# PostgreSQL Pods, this also includes the pgBackRest repository and any
# pgBouncer pods. By default, the pgBackRest and pgBouncer pods inherit the
# value of `pod_anti_affinity`, but one can override the default by setting
# the `pod_anti_affinity_pgbackrest` and `pod_anti_affinity_pgbouncer` variables
# for pgBackRest and pgBouncer respectively
pod_anti_affinity='preferred'
pod_anti_affinity_pgbackrest=''
pod_anti_affinity_pgbouncer=''

# pgBadger Defaults
pgbadgerport='10000'

# pgBackRest Defaults
archive_mode='true'
archive_timeout=60
#backrest_port=''

# Log Defaults
log_statement='none'
log_min_duration_statement=60000

# Autofail Settings
disable_auto_failover='false'

# Scheduler Settings
scheduler_timeout=3600

# pgBackRest S3 Settings
#backrest_aws_s3_key=''
#backrest_aws_s3_secret=''
#backrest_aws_s3_bucket=''
#backrest_aws_s3_endpoint=''
#backrest_aws_s3_region=''

# Service Type for PG Primary & Replica Services
service_type='ClusterIP'

# ===================
# PostgreSQL Settings
# Default parameters for objects created when the database container starts
# such as: default database name and default username.
# ===================
# The database defaults to the name of the PostgreSQL cluster that is created
# unless a database name is specified in "db_name"
db_name=''
# db_password_age_days sets the length of time before a password for a
# PostgreSQL expires. This is default to "0" which is unlimited
db_password_age_days=0
db_password_length=24
db_port=5432
db_replicas=0
db_user='testuser'

# ==================
# Default Container Resource Configurations
# ==================
# Define the default container resource configurations that differ from the
# PostgreSQL Operator defaults. As a convenience, the current PostgreSQL
# Operator defaults are listed with each variable
#
# "default_instance_memory" represents the memory request for a PostgreSQL
# instance. For production instances, this should be at least 512Mi, but we
# model a number that is OK for just basic deployment testing. However, you
# really should make this value bigger
default_instance_memory='128Mi'

# "default_pgbackrest_repo_memory" represents the memory request for a
# pgBackRest repository
# default_pgbackrest_memory='48Mi'
#
# "default_pgbouncer_memory" represents the memory request for a pgBouncer
# instance
# default_pgbouncer_memory='24Mi'

# ==================
# Storage Settings
# ==================
# Which storage definitions to use when creating persistent volumes
# for a variety of uses.

backrest_storage='storageos'
backup_storage='storageos'
primary_storage='storageos'
replica_storage='storageos'
wal_storage=''

storage1_name='hostpathstorage'
storage1_access_mode='ReadWriteMany'
storage1_size='1G'
storage1_type='create'

storage2_name='replicastorage'
storage2_access_mode='ReadWriteMany'
storage2_size='700M'
storage2_type='create'

storage3_name='nfsstorage'
storage3_access_mode='ReadWriteMany'
storage3_size='1G'
storage3_type='create'
storage3_supplemental_groups=65534

storage4_name='nfsstoragered'
storage4_access_mode='ReadWriteMany'
storage4_size='1G'
storage4_match_labels='crunchyzone=red'
storage4_type='create'
storage4_supplemental_groups=65534

storage5_name='storageos'
storage5_access_mode='ReadWriteOnce'
storage5_size='5Gi'
storage5_type='dynamic'
storage5_class='fast'

storage6_name='primarysite'
storage6_access_mode='ReadWriteOnce'
storage6_size='4G'
storage6_type='dynamic'
storage6_class='primarysite'

storage7_name='alternatesite'
storage7_access_mode='ReadWriteOnce'
storage7_size='4G'
storage7_type='dynamic'
storage7_class='alternatesite'

storage8_name='gce'
storage8_access_mode='ReadWriteOnce'
storage8_size='300M'
storage8_type='dynamic'
storage8_class='standard'

storage9_name='rook'
storage9_access_mode='ReadWriteOnce'
storage9_size='1Gi'
storage9_type='dynamic'
storage9_class='rook-ceph-block'

# ==================
# Metrics
# ==================
# Optional installation of Grafana and Prometheus optimized
# to work with the Crunchy PostgreSQL Operator

# Note: Ansible will create namespaces that don't exist
metrics_namespace='pgo'
exporterport='9187'

grafana_install='false'
grafana_admin_username='admin'
grafana_admin_password=''
#grafana_storage_access_mode='ReadWriteOnce'
#grafana_storage_class_name='fast'
#grafana_volume_size='1G'
#grafana_supplemental_groups=65534

prometheus_install='false'
#prometheus_storage_access_mode='ReadWriteOnce'
#prometheus_storage_class_name='fast'
#prometheus_volume_size='1G'
#prometheus_supplemental_groups=65534


# ==================
# Namespace Cleanup
# ==================
# The following settings determine whether or not the PGO and metrics namespaces (defined using
# inventory variables 'pgo_operator_namespace', 'namespace' and 'metrics_namespace') are deleted
# when deprovisioning. Please note that this will also result in the deletion of any non-PGO
# resources deployed in these namespaces, and cannot be undone. By default (and unless otherwise
# specified using the variables below), all namespaces will be preserved when deprovisioning.

#delete_operator_namespace='false'
#delete_watched_namespaces='false'
#delete_metrics_namespace='false'
