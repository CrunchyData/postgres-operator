{
    "kind": "Deployment",
    "apiVersion": "apps/v1",
    "metadata": {
        "name": "{{.Name}}",
        "labels": {
            "vendor": "crunchydata",
            "pgo-pg-database": "true",
            {{.DeploymentLabels }}
        }
    },
    "spec": {
        "replicas": {{.Replicas}},
        "selector": {
          "matchLabels": {
            "vendor": "crunchydata",
            "pg-cluster": "{{.ClusterName}}",
            "pgo-pg-database": "true",
            "deployment-name": "{{.Name}}"
          }
        },
        "template": {
            "metadata": {
                {{ if .PodAnnotations }}
                "annotations": {{ .PodAnnotations }},
                {{ end }}
                "labels": {
                    "name": "{{.Name}}",
                    "vendor": "crunchydata",
                    "pgo-pg-database": "true",
                    "{{.PodAntiAffinityLabelName}}": "{{.PodAntiAffinityLabelValue}}",
                    {{.PodLabels }}
                }
            },
            "spec": {
                "securityContext": {{.SecurityContext}},
                "serviceAccountName": "pgo-pg",
                {{ if .Tolerations }}
                "tolerations": {{ .Tolerations }},
                {{ end }}
                "containers": [
            {
                    "name": "database",
                    "image": "{{.CCPImagePrefix}}/{{.CCPImage}}:{{.CCPImageTag}}",
                    "securityContext": {
                      "allowPrivilegeEscalation": false,
                      "privileged": false,
                      "readOnlyRootFilesystem": true
                    },
                    "readinessProbe": {
                        "exec": {
                            "command": [
                                "/opt/crunchy/bin/postgres-ha/health/pgha-readiness.sh"
                            ]
                        },
                        "initialDelaySeconds": 15
                    },
                    "livenessProbe": {
                        "exec": {
                            "command": [
                                "/opt/crunchy/bin/postgres-ha/health/pgha-liveness.sh"
                            ]
                        },
                        "initialDelaySeconds": 30,
                        "periodSeconds": 15,
                        "timeoutSeconds": 10
                    },
                    {{.ContainerResources }}
                    "env": [{
                        "name": "MODE",
                        "value": "postgres"
                    },
                    {
                        "name": "PGHA_PG_PORT",
                        "value": "{{.Port}}"
                    }, {
                        "name": "PGHA_USER",
                        "value": "postgres"
                    },
                    {{if .IsInit}}
                    {
                        "name": "PGHA_INIT",
                        "valueFrom": {
                            "configMapKeyRef": {
                               "name": "{{.ClusterName}}-pgha-config",
                               "key": "init"
                            }
                         }
                    },
                    {{ end }}
                    {{if .Tablespaces}}
                    {
                        "name": "PGHA_TABLESPACES",
                        "value": "{{ .Tablespaces }}"
                    },
                    {{ end }}
                    {
                        "name": "PATRONI_POSTGRESQL_DATA_DIR",
                        "value": "/pgdata/{{.Name}}"
                    },
                    {{.PgbackrestGCSEnvVars}}
                    {{.PgbackrestS3EnvVars}}
                    {{.PgbackrestEnvVars}}
                    {{.PgmonitorEnvVars}}
                    {
                        "name": "PGHA_DATABASE",
                        "value": "{{.Database}}"
                    }, {
                        "name": "PGHA_REPLICA_REINIT_ON_START_FAIL",
                        "value": "{{.ReplicaReinitOnStartFail}}"
                    }, {
                        "name": "PGHA_SYNC_REPLICATION",
                        "value": "{{.SyncReplication}}"
                    }, {
                        "name": "PGHA_TLS_ENABLED",
                        "value": "{{.TLSEnabled}}"
                    }, {
                        "name": "PGHA_TLS_ONLY",
                        "value": "{{.TLSOnly}}"
                    }, {
                        "name": "PGHA_PASSWORD_TYPE",
                        "value": "{{.PasswordType}}"
                    }, {
                        "name": "PGHA_STANDBY",
                        "value": "{{.Standby}}"
                    }, {
                        "name": "PATRONI_KUBERNETES_NAMESPACE",
                        "valueFrom": {
                            "fieldRef": {
                                "fieldPath": "metadata.namespace"
                            }
                        }
                    },  {
                        "name": "PATRONI_KUBERNETES_SCOPE_LABEL",
                        "value": "{{.ScopeLabel}}"
                    },  {
                        "name": "PATRONI_SCOPE",
                        "valueFrom": {
                            "fieldRef": {
                                "fieldPath": "metadata.labels['{{.ScopeLabel}}']"
                            }
                        }
                    }, {
                        "name": "PATRONI_KUBERNETES_LABELS",
                        "value": "{vendor: \"crunchydata\"}"
                    }, {
                        "name": "PATRONI_LOG_LEVEL",
                        "value": "INFO"
                    }, {
                        "name": "PGHOST",
                        "value": "/tmp"
                    },
                    {
                      "name": "LD_PRELOAD",
                      "value": "/usr/lib64/libnss_wrapper.so"
                    },
                    {
                      "name": "NSS_WRAPPER_PASSWD",
                      "value": "/tmp/nss_wrapper/postgres/passwd"
                    },
                    {
                      "name": "NSS_WRAPPER_GROUP",
                      "value": "/tmp/nss_wrapper/postgres/group"
                    }],


                    "volumeMounts": [{
                            "mountPath": "/pgdata",
                            "name": "pgdata",
                            "readOnly": false
                        }, {
                            "mountPath": "/pgconf/pguser",
                            "name": "user-volume"
                        }, {
                            "mountPath": "/pgconf/pgreplicator",
                            "name": "primary-volume"
                        }, {
                            "mountPath": "/pgconf/pgsuper",
                            "name": "root-volume"
                        },
                        {{if .TLSEnabled}}
                        {
                          "mountPath": "/pgconf/tls",
                          "name": "tls-server"
                        },
                          {{if .ReplicationTLSSecret}}
                          {
                            "mountPath": "/pgconf/tls-replication",
                            "name": "tls-replication"
                          },
                          {{ end }}
                        {{ end }}
                        {
                            "mountPath": "/sshd",
                            "name": "sshd",
                            "readOnly": true
                        },
                        {
                          "name": "ssh-config",
                          "mountPath": "/etc/ssh",
                          "readOnly": true
                        },
                        {
                            "mountPath": "/pgconf",
                            "name": "pgconf-volume"
                        },
                        {
                            "mountPath": "/dev/shm",
                            "name": "dshm"
                        },
                        {
                            "mountPath": "/etc/pgbackrest/conf.d",
                            "name": "pgbackrest-config"
                        },
                        {
                            "mountPath": "/etc/podinfo",
                            "name": "podinfo"
                        },
                        {
                            "mountPath": "/tmp",
                            "name": "tmp"
                        }
                        {{.TablespaceVolumeMounts}}
                    ],

                    "ports": [{
                        "containerPort": 5432,
                        "protocol": "TCP",
                        "name": "postgres"
                    }, {
                        "containerPort": 8009,
                        "protocol": "TCP",
                        "name": "patroni"
                    }],
                    "imagePullPolicy": "IfNotPresent"
                }
                {{ if .ExporterAddon }}
                ,{{.ExporterAddon }}
                {{ end }}
                {{ if .BadgerAddon }}
                ,{{.BadgerAddon }}
                {{ end }}
                ],
                "volumes": [{
                        "name": "pgdata",
                        {{.PVCName}}
                    }, {
                        "name": "user-volume",
                        "secret": {
                            "secretName": "{{.UserSecretName}}"
                        }
                    }, {
                        "name": "primary-volume",
                        "secret": {
                            "secretName": "{{.PrimarySecretName}}"
                        }
                    }, {
                        "name": "sshd",
                        "secret": {
                            "secretName": "{{.ClusterName}}-backrest-repo-config"
                        }
                    }, {
                        "name": "ssh-config",
                        "secret": {
                            "secretName": "{{.ClusterName}}-backrest-repo-config",
                            "items": [
                              {
                                 "key": "config",
                                 "path": "ssh_config"
                              }
                         ]
                      }
                    }, {
                        "name": "root-volume",
                        "secret": {
                            "secretName": "{{.RootSecretName}}"
                        }
                    },
                    {{if .TLSEnabled}}
                    {
                      "name": "tls-server",
                      "projected": {
                        "defaultMode": 288,
                        "sources": [
                          {
                            "secret": {
                                "name": "{{.TLSSecret}}"
                            }
                          },
                          {{if .ReplicationTLSSecret}}
                          {
                            "secret": {
                                "name": "{{.ReplicationTLSSecret}}",
                                "items": [
                                  {
                                    "key": "tls.key",
                                    "path": "tls-replication.key"
                                  },
                                  {
                                    "key": "tls.crt",
                                    "path": "tls-replication.crt"
                                  }
                                ]
                            }
                          },
                          {{ end }}
                          {
                            "secret": {
                                "name": "{{.CASecret}}"
                            }
                          }
                        ]
                      }
                    },
                      {{if .ReplicationTLSSecret}}
                      {
                        "name": "tls-replication",
                        "emptyDir": {
                          "medium": "Memory",
                          "sizeLimit": "2Mi"
                        }
                      },
                      {{ end }}
                    {{ end }}
                    {
                        "name": "report",
                        "emptyDir": {
                          "medium": "Memory",
                          "sizeLimit": "64Mi"
                        }
                    },
                    {
                      "name": "dshm",
                      "emptyDir": {
                        "medium": "Memory"
                      }
                    },
                    {
                      "name": "tmp",
                      "emptyDir": {
                        "medium": "Memory",
                        "sizeLimit": "16Mi"
                      }
                    },
                    {
                      "name": "pgbackrest-config",
                      "projected": { "sources": [] }
                    },
                    {
                        "name": "pgconf-volume",
                        "projected": {
                            "sources": [
                                {{if .ConfVolume}}
                                {
                                    "configMap": {
                                        "name": {{.ConfVolume}}
                                    }
                                },
                                {{end}}
                                {
                                    "configMap": {
                                        "name": "{{.ClusterName}}-pgha-config",
                                        "optional": true
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "podinfo",
                        "downwardAPI": {
                            "defaultMode": 420,
                            "items": [
                                {
                                    "path": "cpu_limit",
                                    "resourceFieldRef": {
                                        "containerName": "database",
                                        "divisor": "1m",
                                        "resource": "limits.cpu"
                                    }
                                },
                                {
                                    "path": "cpu_request",
                                    "resourceFieldRef": {
                                        "containerName": "database",
                                        "divisor": "1m",
                                        "resource": "requests.cpu"
                                    }
                                },
                                {
                                    "path": "mem_limit",
                                    "resourceFieldRef": {
                                        "containerName": "database",
                                        "resource": "limits.memory"
                                    }
                                },
                                {
                                    "path": "mem_request",
                                    "resourceFieldRef": {
                                        "containerName": "database",
                                        "resource": "requests.memory"
                                    }
                                },
                                {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.labels"
                                    },
                                    "path": "labels"
                                },
                                {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.annotations"
                                    },
                                    "path": "annotations"
                                }
                            ]
                        }
                    }
                    {{.TablespaceVolumes}}
                ],
                "affinity": {
                  {{if .NodeSelector}}
                  "nodeAffinity": {{ .NodeSelector }}
                  {{ end }}
                  {{if and .NodeSelector .PodAntiAffinity}},{{end}}
                  {{.PodAntiAffinity}}
                },
                "restartPolicy": "Always",
                "dnsPolicy": "ClusterFirst"
            }
        },
        "strategy": {
            "type": "RollingUpdate",
            "rollingUpdate": {
                "maxUnavailable": 1,
                "maxSurge": 1
            }
        }
    }
}
