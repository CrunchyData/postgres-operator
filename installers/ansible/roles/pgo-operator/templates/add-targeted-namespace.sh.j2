#!/bin/bash 
# Copyright 2017 - 2020 Crunchy Data Solutions, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


if [[ -z "{{ item }}" ]]; then
	echo "usage:  add-targeted-namespace.sh mynewnamespace"
	exit
fi

PGO_CMD='{{ kubectl_or_oc }}'
PGO_IMAGE_PULL_SECRET='{{ pgo_image_pull_secret }}'
PGO_IMAGE_PULL_SECRET_MANIFEST='{{ pgo_image_pull_secret_manifest }}'
TARGET_NAMESPACE='{{ item }}'

# the name of the service account utilized by the PG pods
PG_SA="pgo-pg"

# create the namespace if necessary
{{ kubectl_or_oc }} get ns {{ item }}  > /dev/null
if [ $? -eq 0 ]; then
	echo "namespace" {{ item }} "already exists"
else
	echo "namespace" {{ item }} "is new"
	{{ kubectl_or_oc }} create ns {{ item }}
fi

# set the labels so that this namespace is owned by this installation
{{ kubectl_or_oc }} label namespace/{{ item }} pgo-created-by=add-script
{{ kubectl_or_oc }} label namespace/{{ item }} vendor=crunchydata
{{ kubectl_or_oc }} label namespace/{{ item }} pgo-installation-name={{ pgo_installation_name }}

# determine if an existing pod is using the 'pgo-pg' service account.  if so, do not delete
# and recreate the SA or its associated role and role binding.  this is to avoid any undesired
# behavior with existing PG clusters that are actively utilizing the SA.
{{ kubectl_or_oc }} -n {{ item }} get pods -o yaml | grep "serviceAccount: ${PG_SA}"  > /dev/null
if [ $? -ne 0 ]; then
	{{ kubectl_or_oc }} -n {{ item }} delete --ignore-not-found sa pgo-pg
	{{ kubectl_or_oc }} -n {{ item }} delete --ignore-not-found role pgo-pg-role
	{{ kubectl_or_oc }} -n {{ item }} delete --ignore-not-found rolebinding pgo-pg-role-binding

	cat {{ role_path }}/files/pgo-configs/pgo-pg-sa.json | sed 's/{{ target_namespace }}/'"{{ item }}"'/' | {{ kubectl_or_oc }} -n {{ item }} create -f -
	cat {{ role_path }}/files/pgo-configs/pgo-pg-role.json | sed 's/{{ target_namespace }}/'"{{ item }}"'/' | {{ kubectl_or_oc }} -n {{ item }} create -f -
	cat {{ role_path }}/files/pgo-configs/pgo-pg-role-binding.json | sed 's/{{ target_namespace }}/'"{{ item }}"'/' | {{ kubectl_or_oc }} -n {{ item }} create -f -
else
	echo "Running pods found using SA '${PG_SA}' in namespace {{ item }}, will not recreate"
fi

# create RBAC
{{ kubectl_or_oc }} -n {{ item }} delete --ignore-not-found sa pgo-backrest pgo-default pgo-target
{{ kubectl_or_oc }} -n {{ item }} delete --ignore-not-found role pgo-backrest-role pgo-target-role
{{ kubectl_or_oc }} -n {{ item }} delete --ignore-not-found rolebinding pgo-backrest-role-binding pgo-target-role-binding

cat {{ role_path }}/files/pgo-configs/pgo-default-sa.json | sed 's/{{ target_namespace }}/'"{{ item }}"'/' | {{ kubectl_or_oc }} -n {{ item }} create -f -
cat {{ role_path }}/files/pgo-configs/pgo-target-sa.json | sed 's/{{ target_namespace }}/'"{{ item }}"'/' | {{ kubectl_or_oc }} -n {{ item }} create -f -
cat {{ role_path }}/files/pgo-configs/pgo-target-role.json | sed 's/{{ target_namespace }}/'"{{ item }}"'/' | {{ kubectl_or_oc }} -n {{ item }} create -f -
cat {{ role_path }}/files/pgo-configs/pgo-target-role-binding.json | sed 's/{{ target_namespace }}/'"{{ item }}"'/' | sed 's/{{ operator_namespace }}/'"{{ pgo_operator_namespace }}"'/' | {{ kubectl_or_oc }} -n {{ item }} create -f -
cat {{ role_path }}/files/pgo-configs/pgo-backrest-sa.json | sed 's/{{ target_namespace }}/'"{{ item }}"'/' | {{ kubectl_or_oc }} -n {{ item }} create -f -
cat {{ role_path }}/files/pgo-configs/pgo-backrest-role.json | sed 's/{{ target_namespace }}/'"{{ item }}"'/' | {{ kubectl_or_oc }} -n {{ item }} create -f -
cat {{ role_path }}/files/pgo-configs/pgo-backrest-role-binding.json | sed 's/{{ target_namespace }}/'"{{ item }}"'/' | {{ kubectl_or_oc }} -n {{ item }} create -f -

if [ -r "$PGO_IMAGE_PULL_SECRET_MANIFEST" ]; then
	$PGO_CMD -n "$TARGET_NAMESPACE" create -f "$PGO_IMAGE_PULL_SECRET_MANIFEST"
fi

if [ -n "$PGO_IMAGE_PULL_SECRET" ]; then
	patch='{"imagePullSecrets": [{ "name": "'"$PGO_IMAGE_PULL_SECRET"'" }]}'

	$PGO_CMD -n "$TARGET_NAMESPACE" patch --type=strategic --patch="$patch" serviceaccount/pgo-backrest
	$PGO_CMD -n "$TARGET_NAMESPACE" patch --type=strategic --patch="$patch" serviceaccount/pgo-default
	$PGO_CMD -n "$TARGET_NAMESPACE" patch --type=strategic --patch="$patch" serviceaccount/pgo-pg
	$PGO_CMD -n "$TARGET_NAMESPACE" patch --type=strategic --patch="$patch" serviceaccount/pgo-target
fi
