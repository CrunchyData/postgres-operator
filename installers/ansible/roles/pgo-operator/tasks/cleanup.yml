---
- name: Use kubectl or oc
  set_fact:
    kubectl_or_oc: "{{ openshift_oc_bin if openshift_oc_bin is defined else 'kubectl' }}"
  tags:
  - uninstall
  - update

- name: Get number of Operator instances in this cluster
  shell: |
    {{ kubectl_or_oc }} get deployment --field-selector=metadata.name=postgres-operator --selector=vendor=crunchydata --all-namespaces -o name | wc -l
  register: num_operators
  tags:
  - uninstall
  - update

- name: Set boolean for multi-operator environment
  set_fact: multi_operator_env="{{ 'true' if num_operators.stdout | int > 1 else 'false' }}"    
  tags:
  - uninstall
  - update

- name: Find watched namespaces
  shell: |
    {{ kubectl_or_oc }} get namespaces -o json --selector=vendor=crunchydata,pgo-installation-name={{ pgo_installation_name }}
  register: ns_result
  tags:
  - uninstall
  - update

- name: Set Watched Namespaces
  set_fact:
    watched_namespaces: "{{ ns_result.stdout | from_json | json_query('items[*].metadata.name') }}"
  tags:
  - uninstall
  - update

- name: Delete PG Cluster Deployments
  shell: |
    {{ kubectl_or_oc }} delete deployment --selector=vendor=crunchydata -n {{ item }}
  with_items:
  - "{{ watched_namespaces }}"
  when: not preserve_pg_clusters|bool
  ignore_errors: yes
  no_log: false
  tags:
  - uninstall

- name: Delete PG Cluster Jobs
  shell: |
    {{ kubectl_or_oc }} delete jobs --selector=vendor=crunchydata -n {{ item }}
  with_items:
  - "{{ watched_namespaces }}"
  when: not preserve_pg_clusters|bool
  ignore_errors: yes
  no_log: false
  tags:
  - uninstall

- name: Delete PG Cluster Secrets
  shell: |
    {{ kubectl_or_oc }} delete configmap,secrets --selector=vendor=crunchydata -n {{ item }}
  with_items:
  - "{{ watched_namespaces }}"
  when: not preserve_pg_clusters|bool
  ignore_errors: yes
  no_log: false
  tags:
  - uninstall

- name: Delete PG Cluster Services
  shell: |
    {{ kubectl_or_oc }} delete services --selector=vendor=crunchydata -n {{ item }}
  with_items:
  - "{{ watched_namespaces }}"
  when: not preserve_pg_clusters|bool
  ignore_errors: yes
  no_log: false
  tags:
  - uninstall

- name: Delete PG PVC's
  shell: |
    {{ kubectl_or_oc }} delete pvc --selector=vendor=crunchydata -n {{ item }}
  with_items:
  - "{{ watched_namespaces }}"
  when: not preserve_pg_clusters|bool
  ignore_errors: yes
  no_log: false
  tags:
  - uninstall

- name: Delete Operator Deployment
  shell: |
    {{ kubectl_or_oc }} delete deployment postgres-operator -n {{ pgo_operator_namespace }}
  ignore_errors: yes
  no_log: false
  tags:
  - uninstall
  - update

- name: Delete existing ConfigMaps
  shell: |
    {{ kubectl_or_oc }} delete configmap pgo-config -n {{ pgo_operator_namespace }}
  ignore_errors: yes
  no_log: false
  tags:
  - uninstall
  - update

- name: Delete existing secrets (Operator Namespace)
  shell: |
    {{ kubectl_or_oc }} delete secret pgo-backrest-repo-config pgorole-{{ pgo_admin_role_name }} \
      pgouser-{{ pgo_admin_username }} -n {{ pgo_operator_namespace }}
  ignore_errors: yes
  no_log: false
  tags:
  - uninstall
  - update

- name: Delete pgo.tls secret
  shell: |
    {{ kubectl_or_oc }} delete secret pgo.tls -n {{ pgo_operator_namespace }}
  ignore_errors: yes
  no_log: false
  tags:
  - uninstall

- name: Delete existing Services
  shell: |
    {{ kubectl_or_oc }} delete service postgres-operator -n {{ pgo_operator_namespace }}
  ignore_errors: yes
  no_log: false
  tags:
  - uninstall
  - update

- name: Delete existing Service Account (Operator Namespace)
  shell: |
    {{ kubectl_or_oc }} delete serviceaccount postgres-operator -n {{ pgo_operator_namespace }}
  ignore_errors: yes
  no_log: false
  tags:
  - uninstall
  - update
  when: create_rbac|bool

- name: Delete existing Service Accounts (Watched Namespaces)
  shell: |
    {{ kubectl_or_oc }} delete serviceaccount pgo-backrest pgo-default pgo-pg pgo-target -n {{ item }}
  with_items:
  - "{{ watched_namespaces }}"
  ignore_errors: yes
  no_log: false
  tags:
  - uninstall
  when: create_rbac|bool

- name: Delete existing Cluster Role Bindings
  shell: |
    {{ kubectl_or_oc }} delete clusterrolebinding {{ item }}
  with_items:
  - "pgo-cluster-role"
  ignore_errors: yes
  no_log: false
  tags:
  - uninstall
  - update
  when: not multi_operator_env|bool and
        create_rbac|bool

- name: Delete cluster-admin Cluster Role Binding for PGO Service Account
  command: "{{ kubectl_or_oc }} delete clusterrolebinding pgo-cluster-admin"
  ignore_errors: yes
  no_log: false
  tags:
  - uninstall
  - update
  when: not multi_operator_env|bool and
        create_rbac|bool

- name: Delete existing Cluster Roles
  shell: |
    {{ kubectl_or_oc }} delete clusterrole {{ item }}
  with_items:
  - "pgo-cluster-role"
  ignore_errors: yes
  no_log: false
  tags:
  - uninstall
  - update
  when: not multi_operator_env|bool and
        create_rbac|bool

- name: Delete existing PGO Role Bindings (Watched Namespaces)
  shell: |
    {{ kubectl_or_oc }} delete rolebinding pgo-backrest-role-binding pgo-pg-role-binding \
      pgo-target-role-binding pgo-local-ns -n {{ item }}
  with_items:
  - "{{ watched_namespaces }}"
  ignore_errors: yes
  no_log: false
  tags:
  - uninstall
  when: create_rbac|bool

- name: Delete existing PGO Role Binding (Operator Namespace)
  shell: |
    {{ kubectl_or_oc }} delete rolebinding pgo-role -n {{ pgo_operator_namespace }}
  ignore_errors: yes
  no_log: false
  tags:
  - uninstall
  - update
  when: create_rbac|bool

- name: Delete existing PGO Roles (Watched Namespaces)
  shell: |
    {{ kubectl_or_oc }} delete role pgo-backrest-role pgo-pg-role pgo-target-role pgo-local-ns -n {{ item }}
  with_items:
  - "{{ watched_namespaces }}"
  ignore_errors: yes
  no_log: false
  tags:
  - uninstall
  when: create_rbac|bool

- name: Delete existing PGO Role (Operator Namespace)
  shell: |
    {{ kubectl_or_oc }} delete role pgo-role -n {{ pgo_operator_namespace }}
  ignore_errors: yes
  no_log: false
  tags:
  - uninstall
  - update
  when: create_rbac|bool

- name: Delete existing Custom Objects
  shell: |
    {{ kubectl_or_oc }} delete pgclusters,pgpolicies,pgreplicas,pgtasks -n {{ item }} --all
  with_items:
  - "{{ watched_namespaces }}"
  ignore_errors: yes
  no_log: false
  tags: uninstall

- name: Delete Custom Resource Definitions
  shell: |
    {{ kubectl_or_oc }} delete crds pgclusters.crunchydata.com \
        pgpolicies.crunchydata.com pgreplicas.crunchydata.com pgtasks.crunchydata.com
  ignore_errors: yes
  no_log: false
  when: not multi_operator_env|bool
  tags: uninstall

- name: Remove Labels from Watched Namespaces
  shell: |
    {{ kubectl_or_oc }} label namespace {{ item }} vendor- pgo-created-by- pgo-installation-name-
  ignore_errors: yes
  when: not (delete_watched_namespaces|bool)
  with_items:
  - "{{ watched_namespaces }}"
  no_log: false
  tags:
  - uninstall

- name: Check for output directory
  stat:
    path: "{{ output_dir }}"
  register: out_dir
  ignore_errors: yes
  no_log: false
  tags: uninstall

- name: Delete local output directory
  file:
    state: absent
    path: "{{ output_dir }}/"
  when: out_dir.stat.exists
  ignore_errors: yes
  no_log: false
  tags: uninstall

- name: Ensure output directory exists
  file:
    path: "{{ output_dir }}"
    state: directory
    mode: 0700
  tags: always

- name: Delete PGO client
  become: yes
  become_method: sudo
  file:
    state: absent
    path: "/usr/local/bin/pgo"
  when: pgo_client_install == "true" and
        not multi_operator_env|bool
  ignore_errors: yes
  no_log: false
  tags: uninstall

- name: Delete PGO client container
  shell: |
    {{ kubectl_or_oc }} delete deployment pgo-client -n {{ pgo_operator_namespace }}
  ignore_errors: yes
  no_log: false
  tags:
  - uninstall
  - update
