localhost ansible_connection=local ansible_python_interpreter="/usr/bin/env python"

[all:vars]

crunchy_debug='$CRUNCHY_DEBUG'

# Deploy with PostgreSQL Operator Installer (pgo-deployer)
# ==================
# Note: Enable kubernetes_in_cluster if you are using the pgo-deployer image
# to install the Operator
# ==================
kubernetes_in_cluster='$KUBERNETES_IN_CLUSTER'

# Create RBAC
# ==================
# Note: you may disable creating RBAC resources if they where already
# provisoned by a cluster admin.
# ==================
create_rbac='$CREATE_RBAC'

# Namespace Mode
# ==================
# Note: this setting is only applicable if 'create_rbac=true'.
# 
# When installing RBAC using 'create_rbac', the namespace mode determines
# what Cluster Roles are installed.  The default mode if a value is not 
# specified here is "dynamic", which gives the Operator the full set of 
# Cluster Roles to create/modify/delete namespaces, and also install RBAC
# within those namespaces in order to create PG clusters.  A value of 
# "readonly" can also be specified, which allows the Operator to view 
# namespaces, but not create/modify/delete them nor create  RBAC within 
# them.  And finally "disabled" prevents the creation of any Cluster Roles,
# and therefore disables all namespace functionality.
# ==================
namespace_mode='$NAMESPACE_MODE'

# ===================
# PGO Client Container Settings
# The following settings configure the deployment of a PGO Client Container
# ===================
# PGO Client Container Install
pgo_client_container_install='$PGO_CLIENT_CONTAINER_INSTALL'

# PGO Apiserver URL - Url to be used to connect to the operator service
pgo_apiserver_url='$PGO_APISERVER_URL'

# PGO Client Secret
pgo_client_cert_secret='$PGO_CLIENT_CERT_SECRET'

# ===================
# PGO Settings
# The following settings configure the Crunchy PostgreSQL Operator
# functionality.
# ===================

# The name of the PGO installation
pgo_installation_name='$PGO_INSTALLATION_NAME'

# PGO Admin Credentials
pgo_admin_username='$PGO_ADMIN_USERNAME'
pgo_admin_password='$PGO_ADMIN_PASSWORD'

# PGO Admin Role & Permissions
pgo_admin_role_name='$PGO_ADMIN_ROLE_NAME'
pgo_admin_perms='$PGO_ADMIN_PERMS'

# Namespace where operator will be deployed
# NOTE: Ansible will create namespaces that don't exist
pgo_operator_namespace='$PGO_OPERATOR_NAMESPACE'

# Comma separated list of namespaces Operator will manage
# NOTE: Ansible will create namespaces that don't exist
namespace='$NAMESPACE'

# Crunchy Container Suite images to use. The tags centos7 and rhel7 are acceptable.
# CentOS7 images can be found in dockerhub: https://hub.docker.com/u/crunchydata
# RHEL7 images are available to Crunchy customers: https://access.crunchydata.com/login/
ccp_image_prefix='$CCP_IMAGE_PREFIX'
ccp_image_tag='$CCP_IMAGE_TAG'

# Name of a Secret containing credentials for container image registries.
# Provide a path to the Secret manifest to be installed in each namespace. (optional)
ccp_image_pull_secret='$CCP_IMAGE_PULL_SECRET'
ccp_image_pull_secret_manifest='$CCP_IMAGE_PULL_SECRET_MANIFEST'

# Crunchy PostgreSQL Operator images to use.  The tags centos7 and rhel7 are acceptable.
pgo_image_prefix='$PGO_IMAGE_PREFIX'
pgo_image_tag='$PGO_IMAGE_TAG'

# Name of a Secret containing credentials for container image registries.
# Provide a path to the Secret manifest to be installed in each namespace. (optional)
pgo_image_pull_secret='$PGO_IMAGE_PULL_SECRET'
pgo_image_pull_secret_manifest='$PGO_IMAGE_PULL_SECRET_MANIFEST'

# PGO Client Install
pgo_client_install='$PGO_CLIENT_INSTALL'
pgo_client_version='$PGO_CLIENT_VERSION'

# PGO Apiserver TLS Settings
pgo_tls_no_verify='$PGO_TLS_NO_VERIFY'
pgo_disable_tls='$PGO_DISABLE_TLS'
pgo_apiserver_port=$PGO_APISERVER_PORT 
pgo_tls_ca_store='$PGO_TLS_CA_STORE'
pgo_add_os_ca_store='$PGO_ADD_OS_CA_STORE'
pgo_noauth_routes='$PGO_NOAUTH_ROUTES'

# PGO Event Settings
pgo_disable_eventing='$PGO_DISABLE_EVENTING'

# Set to 'true' to assign the cluster-admin role to the PGO service account.
# Needed for OCP installs to enable dynamic namespace creation
#  (see the PGO docs for more details).
pgo_cluster_admin='$PGO_CLUSTER_ADMIN'

# This will set default enhancements for operator deployed PostgreSQL clusters
backrest='$BACKREST'
badger='$BADGER'
metrics='$METRICS'
sync_replication='$SYNC_REPLICATION'

# This will set the default pod anti-affinity for the deployed PostgreSQL
# clusters. Pod Anti-Affinity is set to determine where the PostgreSQL Pods are
# deployed relative to each other There are three levels:
#
# - required: Pods *must* be scheduled to different Nodes. If a Pod cannot be
#   scheduled to a different Node from the other Pods in the anti-affinity
#   group, then it will not be scheduled.
# - preferred (default): Pods *should* be scheduled to different Nodes. There is
#   a chance that two Pods in the same anti-affinity group could be scheduled to
#   the same node
# - disabled: Pods do not have any anti-affinity rules
#
# The `pod_anti_affinity` label sets the Pod anti-affinity for all of the Pods
# that are managed by the Operator in a PostgreSQL cluster. In addition to the
# PostgreSQL Pods, this also includes the pgBackRest repository and any
# pgBouncer pods. By default, the pgBackRest and pgBouncer pods inherit the
# value of `pod_anti_affinity`, but one can override the default by setting
# the `pod_anti_affinity_pgbackrest` and `pod_anti_affinity_pgbouncer` variables
# for pgBackRest and pgBouncer respectively
pod_anti_affinity='$POD_ANTI_AFFINITY'
pod_anti_affinity_pgbackrest='$POD_ANTI_AFFINITY_PGBACKREST'
pod_anti_affinity_pgbouncer='$POD_ANTI_AFFINITY_PGBOUNCER'

# pgBadger Defaults
pgbadgerport='$PGBADGERPORT'

# pgBackRest Defaults
archive_mode='$ARCHIVE_MODE'
archive_timeout=$ARCHIVE_TIMEOUT
backrest_port='$BACKREST_PORT'

# Log Defaults
log_statement='$LOG_STATEMENT'
log_min_duration_statement=$LOG_MIN_DURATION_STATEMENT

# Autofail Settings
disable_auto_failover='$DISABLE_AUTO_FAILOVER'

# Scheduler Settings
scheduler_timeout=$SCHEDULER_TIMEOUT

# pgBackRest S3 Settings
backrest_aws_s3_key='$BACKREST_AWS_S3_KEY'
backrest_aws_s3_secret='$BACKREST_AWS_S3_SECRET'
backrest_aws_s3_bucket='$BACKREST_AWS_S3_BUCKET'
backrest_aws_s3_endpoint='$BACKREST_AWS_S3_ENDPOINT'
backrest_aws_s3_region='$BACKREST_AWS_S3_REGION'

# Service Type for PG Primary & Replica Services
service_type='$SERVICE_TYPE'

# ===================
# PostgreSQL Settings
# Default parameters for objects created when the database container starts
# such as: default database name and default username.
# ===================
# The database defaults to the name of the PostgreSQL cluster that is created
# unless a database name is specified in "db_name"
db_name='$DB_NAME'
# db_password_age_days sets the length of time before a password for a
# PostgreSQL expires. This is default to "0" which is unlimited
db_password_age_days=$DB_PASSWORD_AGE_DAYS
db_password_length=$DB_PASSWORD_LENGTH
db_port=$DB_PORT
db_replicas=$DB_REPLICAS
db_user='$DB_USER'

# ==================
# Storage Settings
# ==================
# Which storage definitions to use when creating persistent volumes
# for a variety of uses.

backrest_storage='$BACKREST_STORAGE'
backup_storage='$BACKUP_STORAGE'
primary_storage='$PRIMARY_STORAGE'
replica_storage='$REPLICA_STORAGE'

storage1_name='$STORAGE1_NAME'
storage1_access_mode='$STORAGE_ACCESS_MODE'
storage1_size='$STORAGE1_SIZE'
storage1_type='$STORAGE1_TYPE'

storage2_name='$STORAGE2_NAME'
storage2_access_mode='$STORAGE2_ACCESS_MODE'
storage2_size='$STORAGE2_SIZE'
storage2_type='$STORAGE2_TYPE'

storage3_name='$STORAGE3_NAME'
storage3_access_mode='$STORAGE3_ACCESS_MODE'
storage3_size='$STORAGE3_SIZE'
storage3_type='$STORAGE3_TYPE'
storage3_supplemental_groups=$STORAGE3_SUPPLEMENTAL_GROUPS

storage4_name='$STORAGE4_NAME'
storage4_access_mode='$STORAGE4_ACCESS_MODE'
storage4_size='$STORAGE4_SIZE'
storage4_match_labels='$STORAGE4_MATCH_LABEL'
storage4_type='$STORAGE4_TYPE'
storage4_supplemental_groups=$STORAGE4_SUPPLEMENTAL_GROUPS

storage5_name='$STORAGE5_NAME'
storage5_access_mode='$STORAGE5_ACCESS_MODE'
storage5_size='$STORAGE5_SIZE'
storage5_type='$STORAGE5_TYPE'
storage5_class='$STORAGE5_CLASS'

storage6_name='$STORAGE6_NAME'
storage6_access_mode='$STORAGE6_ACCESS_MODE'
storage6_size='$STORAGE6_SIZE'
storage6_type='$STORAGE6_TYPE'
storage6_class='$STORAGE6_CLASS'

storage7_name='$STORAGE7_NAME'
storage7_access_mode='$STORAGE7_ACCESS_MODE'
storage7_size='$STORAGE7_SIZE'
storage7_type='$STORAGE7_TYPE'
storage7_class='$STORAGE7_CLASS'

storage8_name='$STORAGE8_NAME'
storage8_access_mode='$STORAGE8_ACCESS'
storage8_size='$STORAGE8_SIZE'
storage8_type='$STORAGE8_TYPE'
storage8_class='$STORAGE8_CLASS'

storage9_name='$STORAGE9_NAME'
storage9_access_mode='$STORAGE9_ACCESS_MODE'
storage9_size='$STORAGE9_SIZE'
storage9_type='$STORAGE9_TYPE'
storage9_class='$STORAGE9_CLASS'

# ==================
# Metrics
# ==================
# Optional installation of Grafana and Prometheus optimized
# to work with the Crunchy PostgreSQL Operator

# Note: Ansible will create namespaces that don't exist
metrics_namespace='$METRICS_NAMESPACE'
exporterport='$EXPORTERPORT'

grafana_install='$GRAFANA_INSTALL'
grafana_admin_username='$GRAFANA_ADMIN_USERNAME'
grafana_admin_password='$GRAFANA_ADMIN_PASSWORD'
grafana_storage_access_mode='$GRAFANA_STORAGE_ACCESS_MODE'
grafana_storage_class_name='$GRAFANA_STORAGE_CLASS_NAME'
grafana_volume_size='$GRAFANA_VOLUME_SIZE'
grafana_supplemental_groups=$GRAFANA_SUPPLEMENTAL_GROUPS

prometheus_install='$PROMETHEUS_INSTALL'
prometheus_storage_access_mode='$PROMETHEUS_STORAGE_ACCESS_MODE'
prometheus_storage_class_name='$PROMETHEUS_STORAGE_CLASS_NAME'
prometheus_volume_size='$PROMETHEUS_VOLUME_SIZE'
prometheus_supplemental_groups=$PROMETHEUS_SUPPLEMENTAL_GROUPS


# ==================
# Namespace Cleanup
# ==================
# The following settings determine whether or not the PGO and metrics namespaces (defined using
# inventory variables 'pgo_operator_namespace', 'namespace' and 'metrics_namespace') are deleted
# when deprovisioning. Please note that this will also result in the deletion of any non-PGO
# resources deployed in these namespaces, and cannot be undone. By default (and unless otherwise
# specified using the variables below), all namespaces will be preserved when deprovisioning.

delete_operator_namespace='$DELETE_OPERATOR_NAMESPACE'
delete_watched_namespaces='$DELETE_WATCHED_NAMESPACES'
delete_metrics_namespace='$DELETE_METRICS_NAMESPACE'
