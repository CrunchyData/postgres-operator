apiVersion: kuttl.dev/v1beta1
kind: TestAssert
commands:
# First, check that the standalone otel-collector container is ready.
# Then, check the standalone collector logs for logs from all six potential
# sources: patroni, pgbackrest, postgres, pgbouncer, pgadmin, and gunicorn.
- script: |
    retry() { bash -ceu 'printf "$1\nSleeping...\n" && sleep 5' - "$@"; }
    check_containers_ready() { bash -ceu 'echo "$1" | jq -e ".[] | select(.type==\"ContainersReady\") | .status==\"True\""' - "$@"; }
    contains() { bash -ceu '[[ "$1" == *"$2"* ]]' - "$@"; }

    pod=$(kubectl get pods -o name -n "${NAMESPACE}" -l app=opentelemetry)
    [ "$pod" = "" ] && retry "Pod not found" && exit 1

    condition_json=$(kubectl get "${pod}" -n "${NAMESPACE}" -o jsonpath="{.status.conditions}")
    [ "$condition_json" = "" ] && retry "conditions not found" && exit 1
    { check_containers_ready "$condition_json"; } || {
      retry "containers not ready"
      exit 1
    }

    logs=$(kubectl logs "${pod}" --namespace "${NAMESPACE}" -c otel-collector | grep InstrumentationScope)
    { contains "${logs}" 'InstrumentationScope patroni'; } || {
      retry "patroni logs not found"
      exit 1
    }
    { contains "${logs}" 'InstrumentationScope pgbackrest'; } || {
      retry "pgbackrest logs not found"
      exit 1
    }
    { contains "${logs}" 'InstrumentationScope postgres'; } || {
      retry "postgres logs not found"
      exit 1
    }
    { contains "${logs}" 'InstrumentationScope pgbouncer'; } || {
      retry "pgbouncer logs not found"
      exit 1
    }
    { contains "${logs}" 'InstrumentationScope pgadmin'; } || {
      retry "pgadmin logs not found"
      exit 1
    }
    { contains "${logs}" 'InstrumentationScope gunicorn.access'; } || {
      retry "gunicorn logs not found"
      exit 1
    }

    metrics=$(kubectl logs "${pod}" --namespace "${NAMESPACE}" -c otel-collector | grep ccp)
    { contains "${metrics}" 'ccp_stat'; } || {
      retry "metrics not found"
      exit 1
    }
