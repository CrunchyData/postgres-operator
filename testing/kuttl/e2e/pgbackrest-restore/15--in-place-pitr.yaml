---
apiVersion: kuttl.dev/v1beta1
kind: TestStep
commands:
  - script: |
      TARGET_JSON=$(
        kubectl get --namespace "${NAMESPACE}" postgrescluster/original \
          --output 'go-template={{ index .metadata.annotations "testing/objective" | printf "--target=%q" | printf "%q" }}'
      )

      # Configure the cluster for an in-place point-in-time restore (PITR).
      kubectl patch --namespace "${NAMESPACE}" postgrescluster/original \
        --type 'merge' --patch '
          {"spec":{"backups":{"pgbackrest":{"restore":{
            "enabled": true,
            "repoName": "repo1",
            "options": ["--type=time", '"${TARGET_JSON}"']
          }}}}}'

      # Annotate the cluster to trigger the restore.
      kubectl annotate --namespace="${NAMESPACE}" postgrescluster/original \
        'postgres-operator.crunchydata.com/pgbackrest-restore=one'

      # TODO(benjaminjb): remove this when PG10 is no longer being supported
      # For PG10, we need to run a patronictl reinit for the replica when that is running
      # Get the replica name--the replica will exist during the PITR process so we don't need to wait
      if [[ ${KUTTL_PG_VERSION} == 10 ]]; then
        # Find replica
        REPLICA=$(kubectl get pods --namespace "${NAMESPACE}" \
          --selector='
            postgres-operator.crunchydata.com/cluster=original,
            postgres-operator.crunchydata.com/data=postgres,
            postgres-operator.crunchydata.com/role!=master' \
          --output=jsonpath={.items..metadata.name})

        # Wait for replica to be deleted
        kubectl wait pod/"${REPLICA}" --namespace "${NAMESPACE}" --for=delete --timeout=-1s

         # Wait for the restarted replica to be started
        NOT_RUNNING=""
        while [[ "${NOT_RUNNING}" == "" ]]; do
          kubectl get pods --namespace "${NAMESPACE}" "${REPLICA}" || (sleep 1 && continue)

          NOT_RUNNING=$(kubectl get pods --namespace "${NAMESPACE}" "${REPLICA}" \
            --output jsonpath="{.status.containerStatuses[?(@.name=='database')].state.running.startedAt}")
          sleep 1
        done

        kubectl exec --namespace "${NAMESPACE}" "${REPLICA}" -- patronictl reinit original-ha "${REPLICA}" --force
      fi
