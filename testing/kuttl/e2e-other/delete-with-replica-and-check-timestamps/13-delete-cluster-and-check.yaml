---
apiVersion: kuttl.dev/v1beta1
kind: TestStep
commands:
  # Get the names of the current primary and replica -- error if either is blank
  # Delete the cluster
  # Get the delete event for the pods
  # Verify that the replica delete event is greater than the primary delete event
  - script: |
      PRIMARY=$(
        kubectl get pods --namespace="${NAMESPACE}" \
          --selector='postgres-operator.crunchydata.com/role=master' \
          --output=jsonpath={.items..metadata.name}
      )

      REPLICA=$(
        kubectl get pods --namespace="${NAMESPACE}" \
          --selector='postgres-operator.crunchydata.com/role=replica' \
          --output=jsonpath={.items..metadata.name}
      )

      echo "DELETE: Found primary ${PRIMARY} and replica ${REPLICA} pods"

      if [ -z "$PRIMARY" ]; then exit 1; fi      
      if [ -z "$REPLICA" ]; then exit 1; fi

      kubectl delete postgrescluster -n "${NAMESPACE}" delete-switchover-with-timestamp
      
      kubectl wait "pod/${REPLICA}" --namespace "${NAMESPACE}" --for=delete --timeout=180s

      KILLING_REPLICA_TIMESTAMP=$(
        kubectl get events --namespace="${NAMESPACE}" \
          --field-selector reason="Killing",involvedObject.fieldPath="spec.containers{database}",involvedObject.name="${REPLICA}" \
          --output=jsonpath={.items..firstTimestamp}
      )

      kubectl wait "pod/${PRIMARY}" --namespace "${NAMESPACE}" --for=delete --timeout=180s

      KILLING_PRIMARY_TIMESTAMP=$(
        kubectl get events --namespace="${NAMESPACE}" \
          --field-selector reason="Killing",involvedObject.fieldPath="spec.containers{database}",involvedObject.name="${PRIMARY}" \
          --output=jsonpath={.items..firstTimestamp}
      )

      echo "DELETE: Found primary ${KILLING_PRIMARY_TIMESTAMP} and replica ${KILLING_REPLICA_TIMESTAMP} timestamps"

      if [[ "${KILLING_PRIMARY_TIMESTAMP}" < "${KILLING_REPLICA_TIMESTAMP}" ]]; then exit 1; fi
