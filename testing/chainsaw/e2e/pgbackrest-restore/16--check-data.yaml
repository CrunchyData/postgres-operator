---
# Confirm that data was restored to the point-in-time.
apiVersion: batch/v1
kind: Job
metadata:
  name: original-pitr-primary-data
  labels: { postgres-operator-test: kuttl }
spec:
  backoffLimit: 3
  template:
    metadata:
      labels: { postgres-operator-test: kuttl }
    spec:
      restartPolicy: Never
      containers:
        - name: psql
          image: ${KUTTL_PSQL_IMAGE}
          env:
            - name: PGURI
              valueFrom: { secretKeyRef: { name: original-pguser-original, key: uri } }

            # Do not wait indefinitely.
            - { name: PGCONNECT_TIMEOUT, value: '5' }

          # Note: the `$$$$` is reduced to `$$` by Kubernetes.
          # - https://kubernetes.io/docs/tasks/inject-data-application/
          command:
            - psql
            - $(PGURI)
            - -qa
            - --set=ON_ERROR_STOP=1
            - --command
            - |
              DO $$$$
              DECLARE
                restored jsonb;
              BEGIN
                SELECT jsonb_agg(important) INTO restored FROM important;
                ASSERT restored = '[
                  {"data":"treasure"}, {"data":"water"}, {"data":"socks"}
                ]', format('got %L', restored);
              END $$$$;

---
# Confirm that replicas are also restored and streaming from the primary.
apiVersion: batch/v1
kind: Job
metadata:
  name: original-pitr-replica-data
  labels: { postgres-operator-test: kuttl }
spec:
  backoffLimit: 3
  template:
    metadata:
      labels: { postgres-operator-test: kuttl }
    spec:
      restartPolicy: Never
      containers:
        - name: psql
          image: ${KUTTL_PSQL_IMAGE}
          env:
            - name: PGPORT
              valueFrom: { secretKeyRef: { name: original-pguser-original, key: port } }
            - name: PGDATABASE
              valueFrom: { secretKeyRef: { name: original-pguser-original, key: dbname } }
            - name: PGUSER
              valueFrom: { secretKeyRef: { name: original-pguser-original, key: user } }
            - name: PGPASSWORD
              valueFrom: { secretKeyRef: { name: original-pguser-original, key: password } }

            # The user secret does not contain the replica service.
            - name: NAMESPACE
              valueFrom: { fieldRef: { fieldPath: metadata.namespace } }
            - name: PGHOST
              value: "original-replicas.$(NAMESPACE).svc"

            # Do not wait indefinitely.
            - { name: PGCONNECT_TIMEOUT, value: '5' }

          # Note: the `$$$$` is reduced to `$$` by Kubernetes.
          # - https://kubernetes.io/docs/tasks/inject-data-application/
          command:
            - psql
            - -qa
            - --set=ON_ERROR_STOP=1
            - --command
            - |
              DO $$$$
              DECLARE
                restored jsonb;
              BEGIN
                ASSERT pg_is_in_recovery(), 'expected replica';
                -- only users with "pg_read_all_settings" role may examine "primary_conninfo"
                -- ASSERT current_setting('primary_conninfo') <> '', 'expected streaming';

                SELECT jsonb_agg(important) INTO restored FROM important;
                ASSERT restored = '[
                  {"data":"treasure"}, {"data":"water"}, {"data":"socks"}
                ]', format('got %L', restored);
              END $$$$;
