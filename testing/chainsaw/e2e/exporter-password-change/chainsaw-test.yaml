# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  creationTimestamp: null
  name: exporter-password-change
spec:
  steps:
  - catch:
    - script:
        content: kubectl -n $NAMESPACE describe pods --selector postgres-operator.crunchydata.com/cluster=exporter-password-change,postgres-operator.crunchydata.com/crunchy-postgres-exporter=true
    name: step-00
    try:
    - apply:
        file: files/initial-postgrescluster.yaml
    - assert:
        file: files/initial-postgrescluster-checks.yaml
    - script:
        content: |
          retry() { bash -ceu 'printf "$1\nSleeping...\n" && sleep 5' - "$@"; }
          check_containers_ready() { bash -ceu 'echo "$1" | jq -e ".[] | select(.type==\"ContainersReady\") | .status==\"True\""' - "$@"; }

          pod=$(kubectl get pods -o name -n $NAMESPACE \
            -l postgres-operator.crunchydata.com/cluster=exporter-password-change \
            -l postgres-operator.crunchydata.com/crunchy-postgres-exporter=true)
          [ "$pod" = "" ] && retry "Pod not found" && exit 1

          condition_json=$(kubectl get ${pod} -n ${NAMESPACE} -o jsonpath="{.status.conditions}")
          [ "$condition_json" = "" ] && retry "conditions not found" && exit 1
          { check_containers_ready "$condition_json"; } || {
            retry "containers not ready"
            exit 1
          }
  - catch:
    - podLogs:
        container: exporter
        selector: postgres-operator.crunchydata.com/cluster=exporter-password-change,postgres-operator.crunchydata.com/crunchy-postgres-exporter=true
    name: step-01
    try:
    - script:
        content: |
          retry() { bash -ceu 'printf "$1\nSleeping...\n" && sleep 5' - "$@"; }
          contains() { bash -ceu '[[ "$1" == *"$2"* ]]' - "$@"; }

          pod=$(kubectl get pods -o name -n $NAMESPACE \
            -l postgres-operator.crunchydata.com/cluster=exporter-password-change \
            -l postgres-operator.crunchydata.com/crunchy-postgres-exporter=true)
          [ "$pod" = "" ] && retry "Pod not found" && exit 1

          scrape_metrics=$(kubectl exec ${pod} -c exporter -n ${NAMESPACE} -- \
            curl --silent http://localhost:9187/metrics | grep "pg_exporter_last_scrape_error")
          { contains "${scrape_metrics}" 'pg_exporter_last_scrape_error 0'; } || {
            retry "${scrape_metrics}"
            exit 1
          }

          pid=$(kubectl exec ${pod} -n ${NAMESPACE} -c exporter -- cat /tmp/postgres_exporter.pid)
          kubectl annotate --overwrite -n ${NAMESPACE} ${pod} oldpid=${pid}
  - name: step-02
    try:
    - apply:
        file: files/update-monitoring-password.yaml
    - assert:
        file: files/update-monitoring-password-checks.yaml
    - script:
        content: |
          retry() { bash -ceu 'printf "$1\nSleeping...\n" && sleep 5' - "$@"; }
          contains() { bash -ceu '[[ "$1" == *"$2"* ]]' - "$@"; }
          check_containers_ready() { bash -ceu 'echo "$1" | jq -e ".[] | select(.type==\"ContainersReady\") | .status==\"True\""' - "$@";}

          pod=$(kubectl get pods -o name -n $NAMESPACE \
            -l postgres-operator.crunchydata.com/cluster=exporter-password-change \
            -l postgres-operator.crunchydata.com/crunchy-postgres-exporter=true)
          [ "$pod" = "" ] && retry "Pod not found" && exit 1

          oldPid=$(kubectl get ${pod} -n ${NAMESPACE} -o jsonpath="{.metadata.annotations.oldpid}")
          newPid=$(kubectl exec ${pod} -n ${NAMESPACE} -c exporter -- cat /tmp/postgres_exporter.pid)
          [ "${oldPid}" -eq "${newPid}" ] && retry "pid should have changed" && exit 1

          password=$(kubectl exec -n ${NAMESPACE} ${pod} -c exporter -- bash -c 'cat /opt/crunchy/password')
          { contains "${password}" "password"; } || {
            retry "unexpected password: ${password}"
            exit 1
          }

          scrape_metrics=$(kubectl exec ${pod} -c exporter -n ${NAMESPACE} -- \
            curl --silent http://localhost:9187/metrics | grep "pg_exporter_last_scrape_error")
          { contains "${scrape_metrics}" 'pg_exporter_last_scrape_error 0'; } || {
            retry "${scrape_metrics}"
            exit 1
          }
