[
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": " A full installation of the Operator includes the following steps:\n create a project structure configure your environment variables configure Operator templates create security resources deploy the operator install pgo CLI (end user command tool)  Operator end-users are only required to install the pgo CLI client on their host and can skip the server-side installation steps. pgo CLI clients are provided on the Github Releases page for Linux, Mac, and Windows clients.\nThe Operator can also be deployed with a sample Helm chart and also a quickstart script. Those installation methods don\u0026rsquo;t provide the same level of customization that the installation provides but are alternatives. Crunchy also provides an Ansible playbook for Crunchy customers.\nSee below for details on the Helm and quickstart installation methods.\nCreate Project Structure The Operator follows a golang project structure, you can create a structure as follows on your local Linux host:\nmkdir -p $HOME/odev/src/github.com/crunchydata $HOME/odev/bin $HOME/odev/pkg cd $HOME/odev/src/github.com/crunchydata git clone https://github.com/CrunchyData/postgres-operator.git cd postgres-operator git checkout 3.5.1  This creates a directory structure under your HOME directory name odev and clones the current Operator version to that structure.\nConfigure Environment Environment variables control aspects of the Operator installation. You can copy a sample set of Operator environment variables and aliases to your .bashrc file to work with.\ncat $HOME/odev/src/github.com/crunchydata/postgres-operator/examples/envs.sh \u0026gt;\u0026gt; $HOME/.bashrc source $HOME/.bashrc  For various scripts used by the Operator, the expenv utility is required, download this utility from the Github Releases page, and place it into your PATH (e.g. $HOME/odev/bin). There is also a Makefile target that includes is expenv and several other dependencies that are only needed if you plan on building from source:\nmake setup   In this example set of environment variables, the CO_NAMESPACE environment variable is set to demo as an example namespace in which the Operator will be deployed. See the Design section of documentation on the Operator namespace requirements.\nAdjust the namespace value to suit your needs. There is a Makefile target you can run to create the demo namespace if you want:\nmake setupnamespace  Note, that command sets your Kubernetes context to be demo as well, so use with caution if you are using your system\u0026rsquo;s main kubeconfig file.\nConfigure Operator Templates Within the Operator conf directory are several configuration files and templates used by the Operator to determine the various resources that it deploys on your Kubernetes cluster, specifically the PostgreSQL clusters it deploys.\nWhen you install the Operator you must make choices as to what kind of storage the Operator has to work with for example. Storage varies with each installation. As an installer, you would modify these configuration templates used by the Operator to customize its behavior.\nNote: when you want to make changes to these Operator templates and configuration files after your initial installation, you will need to re-deploy the Operator in order for it to pick up any future configuration changes.\nHere are some common examples of configuration changes most installers would make:\nStorage Inside conf/postgresql-operator/pgo.yaml there are various storage configurations defined.\nPrimaryStorage: nfsstorage ArchiveStorage: nfsstorage BackupStorage: nfsstorage ReplicaStorage: nfsstorage Storage: hostpathstorage: AccessMode: ReadWriteMany Size: 1G StorageType: create nfsstorage: AccessMode: ReadWriteMany Size: 1G StorageType: create SupplementalGroups: 65534 storageos: AccessMode: ReadWriteOnce Size: 1G StorageType: dynamic StorageClass: fast Fsgroup: 26  Listed above are the pgo.yaml sections related to storage choices. PrimaryStorage specifies the name of the storage configuration used for PostgreSQL primary database volumes to be provisioned. In the example above, a NFS storage configuration is picked. That same storage configuration is selected for the other volumes that the Operator will create.\nThis sort of configuration allows for a PostgreSQL primary and replica to use different storage if you want. Other storage settings like AccessMode, Size, StorageType, StorageClass, and Fsgroup further define the storage configuration. Currently, NFS, HostPath, and Storage Classes are supported in the configuration.\nAs part of the Operator installation, you will need to adjust these storage settings to suit your deployment requirements.\nFor NFS Storage, it is assumed that there are sufficient Persistent Volumes (PV) created for the Operator to use when it creates Persistent Volume Claims (PVC). The creation of PV\u0026rsquo;s is something a Kubernetes cluster-admin user would typically provide before installing the Operator. There is an example script which can be used to create NFS Persistent Volumes located here:\n./pv/create-nfs-pv.sh  A similar script is provided for HostPath persistent volume creation if you wanted to use HostPath for testing:\n./pv/create-pv.sh  Adjust the above PV creation scripts to suit your local requirements, the purpose of these scripts are solely to produce a test set of Volume to test the Operator.\nOther settings in pgo.yaml are described in the pgo.yaml Configuration section of the documentation.\nOperator Security The Operator implements its own RBAC (Role Based Access Controls) for authenticating Operator users access to the Operator\u0026rsquo;s REST API.\nThere is a default set of Roles and Users defined respectively in the following files:\n./conf/postgres-operator/pgouser ./conf/postgres-operator/pgorole  Adjust these settings to meet your local requirements.\nCreate Security Resources The Operator installation requires Kubernetes administrators to create Resources required by the Operator. These resources are only allowed to be created by a cluster-admin user.\nSpecifically, Custom Resource Definitions for the Operator, and Service Accounts used by the Operator are created which require cluster permissions.\nAs part of the installation, download the expenv utility from the Releases page, add that to your path and as cluster admin, run the following Operator Makefile target:\nmake installrbac  That target will create the RBAC Resources required by the Operator. This set of Resources is created a single time unless a new Operator release requires these Resources to be recreated. Note that when you run make installrbac the set of keys used by the Operator REST API and also the pgbackrest ssh keys are generated. These keys are stored in the ConfigMap used by the Operator for securing connections.\nVerify the Operator Custom Resource Definitions are created as follows:\nkubectl get crd  You should see the pgclusters CRD among the listed CRD resource types.\nDeploy the Operator At this point, you as a normal Kubernetes user should be able to deploy the Operator. To do this, run the following Makefile target:\nmake deployoperator  This will cause any existing Operator to be removed first, then the configuration to be bundled into a ConfigMap, then the Operator Deployment to be created.\nThis will create a postgres-operator Deployment along with a crunchy-scheduler Deployment, and a postgres-operator Service. So, Operator administrators needing to make changes to the Operator configuration would run this make target to pick up any changes to pgo.yaml or the Operator templates.\npgo CLI Installation Most users will work with the Operator using the pgo CLI tool. That tool is downloaded from the GitHub Releases page for the Operator (https://github.com/crunchydata/postgres-operator/releases).\nThe pgo client is provided in Mac, Windows, and Linux binary formats, download the appropriate client to your local laptop or workstation to work with a remote Operator. Prior to using pgo, users testing the Operator on a single host can specify the postgres-operator URL as follows:\n $ kubectl get service postgres-operator NAME CLUSTER-IP EXTERNAL-IP PORT(S) AGE postgres-operator 10.104.47.110 \u0026lt;none\u0026gt; 8443/TCP 7m $ export CO_APISERVER_URL=https://10.104.47.110:8443 pgo version  That URL address needs to be reachable from your local pgo client host. Your Kubernetes administrator will likely need to create a network route, ingress, or LoadBalancer service to expose the Operator\u0026rsquo;s REST API to applications outside of the Kubernetes cluster. Your Kubernetes administrator might also allow you to run the Kubernetes port-forward command, contact your adminstrator for details.\nNext, the pgo client needs to reference the keys used to secure the Operator REST API:\n export PGO_CA_CERT=$COROOT/conf/postgres-operator/server.crt export PGO_CLIENT_CERT=$COROOT/conf/postgres-operator/server.crt export PGO_CLIENT_KEY=$COROOT/conf/postgres-operator/server.key  You can also specify these keys on the command line as follows:\npgo version --pgo-ca-cert=$COROOT/conf/postgres-operator/server.crt --pgo-client-cert=$COROOT/conf/postgres-operator/server.crt --pgo-client-key=$COROOT/conf/postgres-operator/server.key  Lastly, create a .pgouser file in your home directory with a credential known by the Operator (see your administrator for Operator credentials to use):\nusername:password  You can create this file as follows:\necho \u0026quot;username:password\u0026quot; \u0026gt; $HOME/.pgouser  Note, you can also store the pgouser file in alternate locations, see the Security documentation for details.\nAt this point, you can test connectivity between your laptop or workstation and the Postgres Operator deployed on a Kubernetes cluster as follows:\npgo version  You should get back a valid response showing the client and server version numbers.\nVerify the Installation Now that you have deployed the Operator, you can verify that it is running correctly.\nYou should see a pod running that contains the Operator:\nkubectl get pod --selector=name=postgres-operator  That pod should show 2 of 2 containers in running state.\nThe sample environment script, env.sh, if used creates some bash alias commands that you can use to view the Operator logs. This is useful in case you find one of the Operator containers not in a running status.\nUsing the pgo CLI, you can verify the versions of the client and server match as follows:\npgo version  This also tests connectivity between your pgo client host and the Operator server.\nHelm Chart The Operator Helm chart is located in the following location: ./postgres-operator/chart\nModify the Helm templates to suit your requirements. The Operator templates in the conf directory are essentially the same as found in the Helm chart folder. Adjust as mentioned above to customize the installation.\nAlso, a pre-installation step is currently required prior to installing the Operator Helm chart. Specifically, the following script must be executed prior to installing the chart:\n./postgres-operator/chart/gen-pgo-keys.sh  This script will generate any keys and certificates required to deploy the Operator, and will then place them in the proper directory within the Helm chart.\nQuickstart Script There is a quickstart script found in the following GitHub repository location which seeks to automate a simple Operator deployment onto an existing Kubernetes installation:\n./examples/quickstart.sh  This script is a bash script and is intended to run on Linux hosts. The script will ask you questions related to your configuration and the proceed to execute commands to cause the Operator to be deployed. The quickstart script is meant for very simple deployments and to test the Operator and would not be typically used to maintain an Operator deployment.\nGet a copy of the script as follows:\nwget https://raw.githubusercontent.com/CrunchyData/postgres-operator/master/examples/quickstart.sh chmod +x ./quickstart.sh  There are some prerequisites for running this script:\n a running Kubernetes system access to a Kube user account that has cluster-admin priviledges, this is required to install the Operator RBAC rules a namespace created to hold the Operator a Storage Class used for dynamic storage provisioning a Mac, Ubuntu, or Centos host to install from, this host and your terminal session should be configured to access your Kube cluster  "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/operator-cli/",
	"title": "Operator CLI",
	"tags": [],
	"description": "",
	"content": " The command line tool, pgo, is used to interact with the Postgres Operator.\nMost users will work with the Operator using the pgo CLI tool. That tool is downloaded from the GitHub Releases page for the Operator (https://github.com/crunchydata/postgres-operator/releases).\nThe pgo client is provided in Mac, Windows, and Linux binary formats, download the appropriate client to your local laptop or workstation to work with a remote Operator.\nSyntax Use the following syntax to run pgo commands from your terminal window:\npgo [command] ([TYPE] [NAME]) [flags]  Where command is a verb like: - show - get - create - delete\nAnd type is a resource type like: - cluster - policy - user\nAnd name is the name of the resource type like: - mycluster - somesqlpolicy - john\nTo get detailed help information and command flag descriptions on each pgo command, enter:\npgo [command] -h  Operations The following table shows the pgo operations currently implemented:\n   Operation Syntax Description     apply pgo apply mypolicy \u0026ndash;selector=name=mycluster Apply a SQL policy on a Postgres cluster(s)   backup pgo backup mycluster Perform a backup on a Postgres cluster(s)   create pgo create cluster mycluster Create an Operator resource type (e.g. cluster, policy, schedule, user)   delete pgo delete cluster mycluster Delete an Operator resource type (e.g. cluster, policy, user, schedule)   df pgo df mycluster Display the disk status/capacity of a Postgres cluster.   failover pgo failover mycluster Perform a manual failover of a Postgres cluster.   help pgo help Display general pgo help information.   label pgo label mycluster \u0026ndash;label=environment=prod Create a metadata label for a Postgres cluster(s).   load pgo load \u0026ndash;load-config=load.json \u0026ndash;selector=name=mycluster Perform a data load into a Postgres cluster(s).   reload pgo reload mycluster Perform a pg_ctl reload command on a Postgres cluster(s).   restore pgo restore mycluster Perform a pgbackrest or pgdump restore on a Postgres cluster.   scale pgo scale mycluster Create a Postgres replica(s) for a given Postgres cluster.   scaledown pgo scaledown mycluster \u0026ndash;query Delete a replica from a Postgres cluster.   show pgo show cluster mycluster Display Operator resource information (e.g. cluster, user, policy, schedule).   status pgo status Display Operator status.   test pgo test mycluster Perform a SQL test on a Postgres cluster(s).   update pgo update cluster \u0026ndash;label=autofail=false Update a Postgres cluster(s).   upgrade pgo upgrade mycluster Perform a minor upgrade to a Postgres cluster(s).   user pgo user \u0026ndash;selector=name=mycluster \u0026ndash;update-passwords Perform Postgres user maintenance on a Postgres cluster(s).   version pgo version Display Operator version information.    Common Operations Cluster Operations Create Cluster With a Primary Only pgo create cluster mycluster  Create a cluster using the Crunchy Postgres + PostGIS container image:\npgo create cluster mygiscluster --ccp-image=crunchy-postgres-gis  Create Cluster With a Primary and a Replica pgo create cluster mycluster --replica-count=1  Scale a Cluster with Additional Replicas pgo scale cluster mycluster  Create a Cluster with pgbackrest Configured pgo create cluster mycluster --pgbackrest  Scaledown a Cluster pgo scaledown cluster mycluster --query pgo scaledown cluster mycluster --target=sometarget  Delete a Cluster pgo delete cluster mycluster  Delete a Cluster and It\u0026rsquo;s Persistent Volume Claims pgo delete cluster mycluster --delete-data  Test a Cluster pgo test mycluster  View Disk Utilization pgo df mycluster  Label Operations Apply a Label to a Cluster pgo label mycluster --label=environment=prod  Appy a Label to a Set of Clusters pgo label --selector=clustertypes=research --label=environment=prod  Show Clusters by Label pgo show cluster --selector=environment=prod  Policy Operations Create a Policy pgo create policy mypolicy --in-file=mypolicy.sql  View Policies pgo show policy all  Apply a Policy pgo apply mypolicy --selector=environment=prod pgo apply mypolicy --selector=name=mycluster  Operator Status Show Operator Version pgo version  Show Operator Status pgo status  Show Operator Configuration pgo show config  Backup and Restore Perform a pgbasebackup pgo backup mycluster  Perform a pgbackrest backup pgo backup mycluster --backup-type=pgbackrest pgo backup mycluster --backup-type=pgbackrest --backup-opts=\u0026quot;--type=diff\u0026quot;  The last example passes in pgbackrest flags to the backup command. See pgbackrest.org for command flag descriptions.\nPerform a pgdump backup pgo backup mycluster --backup-type=pgdump pgo backup mycluster --backup-type=pgdump --backup-opts=\u0026quot;--dump-all --verbose\u0026quot; pgo backup mycluster --backup-type=pgdump --backup-opts=\u0026quot;--schema=myschema\u0026quot;  Note: To run pgdump_all instead of pgdump, pass \u0026lsquo;\u0026ndash;dump-all\u0026rsquo; flag in \u0026ndash;backup-opts as shown above. All \u0026ndash;backup-opts should be space delimited.\nPerform a pgbackrest restore pgo restore mycluster  Or perform a restore based on a point in time:\npgo restore mycluster --pitr-target=\u0026quot;2019-01-14 00:02:14.921404+00\u0026quot; --backup-opts=\u0026quot;--type=time\u0026quot;  You can also target specific nodes when performing a restore:\npgo restore mycluster --node-label=failure-domain.beta.kubernetes.io/zone=us-central1-a  Here are some steps to test PITR:\n pgo create cluster mycluster \u0026ndash;pgbackrest create a table on the new cluster called beforebackup pgo backup mycluster \u0026ndash;backup-type=pgbackrest create a table on the cluster called afterbackup execute select now() on the database to get the time, use this timestamp minus a couple of minutes when you perform the restore pgo restore mycluster \u0026ndash;pitr-target=\u0026ldquo;2019-01-14 00:02:14.921404+00\u0026rdquo; \u0026ndash;backup-opts=\u0026ldquo;\u0026ndash;type=time \u0026ndash;log-level-console=info\u0026rdquo; wait for the database to be restored execute \\d in the database and you should see the database state prior to where the afterbackup table was created  See the Design section of the Operator documentation for things to consider before you do a restore.\nRestore from pgbasebackup pgo create cluster restoredcluster --backup-path=/somebackup/path --backup-pvc=somebackuppvc --secret-from=mycluster  Restore from pgdump backup pgo restore mycluster --backup-type=pgdump --backup-pvc=mycluster-pgdump-pvc --pitr-target=\u0026quot;2019-01-15 00:03:25\u0026quot;  To restore the most recent pgdump at the default path, leave off a timestamp:\npgo restore mycluster --backup-type=pgdump --backup-pvc=mycluster-pgdump-pvc  Fail-over Operations Perform a Manual Fail-over pgo failover mycluster --query pgo failover mycluster --target=sometarget  Create a Cluster with Auto-fail Enabled pgo create cluster mycluster --autofail  Add-On Operations Create a Cluster with pgbouncer pgo create cluster mycluster --pgbouncer  Create a Cluster with pgpool pgo create cluster mycluster --pgpool  Add pgbouncer to a Cluster pgo create pgbouncer mycluster  Note, the pgbouncer configuration defaults to specifying only a single entry for the primary database. If you want it to have an entry for the replica service, add the following configuration to pgbouncer.ini:\n{{.PG_REPLICA_SERVICE_NAME}} = host={{.PG_REPLICA_SERVICE_NAME}} port=5432 auth_user={{.PG_USERNAME}} dbname=userdb  Add pgpool to a Cluster pgo create pgpool mycluster  Remove pgbouncer from a Cluster pgo delete pgbouncer mycluster  Remove pgpool from a Cluster pgo delete pgpool mycluster  Create a Cluster with pgbadger pgo create cluster mycluster --pgbadger  Create a Cluster with Metrics Collection pgo create cluster mycluster --metrics  Note: backend metric storage such as Prometheus and front end visualization software such as Grafana are not created automatically by the PostgreSQL Operator. For instructions on installing Grafana and Prometheus in your environment, see the Crunchy Container Suite documentation.\nScheduled Tasks Automated full pgBackRest backups every Sunday at 1 am pgo create schedule mycluster --schedule=\u0026quot;0 1 * * SUN\u0026quot; \\ --schedule-type=pgbackrest --pgbackrest-backup-type=full  Automated diff pgBackRest backups every Monday-Saturday at 1 am pgo create schedule mycluster --schedule=\u0026quot;0 1 * * MON-SAT\u0026quot; \\ --schedule-type=pgbackrest --pgbackrest-backup-type=diff  Automated pgBaseBackup backups every day at 1 am In order to have a backup PVC created, users should run the pgo backup command against the target cluster prior to creating this schedule.\npgo create schedule mycluster --schedule=\u0026quot;0 1 * * *\u0026quot; \\ --schedule-type=pgbasebackup --pvc-name=mycluster-backup  Automated Policy every day at 1 am pgo create schedule --selector=pg-cluster=mycluster --schedule=\u0026quot;0 1 * * *\u0026quot; \\ --schedule-type=policy --policy=mypolicy --database=userdb \\ --secret=mycluster-testuser-secret  Complex Deployments Create a Cluster using Specific Storage pgo create cluster mycluster --storage-config=somestorageconfig  Create a Cluster using a Preferred Node pgo create cluster mycluster --node-label=speed=superfast  Create a Replica using Specific Storage pgo scale mycluster --storage-config=someslowerstorage  Create a Replica using a Preferred Node pgo scale mycluster --node-label=speed=slowerthannormal  Create a Cluster with LoadBalancer ServiceType pgo create cluster mycluster --service-type=LoadBalancer  pgo Global Flags pgo global command flags include:\n   Flag Description     apiserver-url URL of the Operator REST API service, override with CO_APISERVER_URL environment variable   debug enable debug messages   pgo-ca-cert The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. Override with PGO_CA_CERT environment variable   pgo-client-cert The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. Override with PGO_CLIENT_CERT environment variable   pgo-client-key The Client Key file path for authenticating to the PostgreSQL Operator apiserver. Override with PGO_CLIENT_KEY environment variable    "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/design/",
	"title": "Design",
	"tags": [],
	"description": "",
	"content": " Provisioning So, what does the Postgres Operator actually deploy when you create a cluster?\nOn this diagram, objects with dashed lines are components that are optionally deployed as part of a PostgreSQL Cluster by the operator. Objects with solid lines are the fundamental and required components.\nFor example, within the Primary Deployment, the metrics container is completely optional. That component can be deployed using either the operator configuration or command line arguments if you want to cause metrics to be collected from the Postgres container.\nReplica deployments are similar to the primary deployment but are optional. A replica is not required to be created unless the capability for one is necessary. As you scale up the Postgres cluster, the standard set of components gets deployed and replication to the primary is started.\nNotice that each cluster deployment gets its own unique Persistent Volumes. Each volume can use different storage configurations which provides fined grained placement of the database data files.\nCustom Resource Definitions Kubernetes Custom Resource Definitions are used in the design of the PostgreSQL Operator to define the following:\n Cluster - pgclusters Backup - pgbackups Upgrade - pgupgrades Policy - pgpolicies Tasks - pgtasks  Metadata about the Postgres cluster deployments are stored within these CRD resources which act as the source of truth for the Operator.\nThe postgres-operator design incorporates the following concepts:\nEvent Listeners Kubernetes events are created for the Operator\u0026rsquo;s CRD resources when new resources are made, deleted, or updated. These events are processed by the Operator to perform asynchronous actions.\nAs events are captured, controller logic is executed within the Operator to perform the bulk of operator logic.\nREST API A feature of the Operator is to provide a REST API upon which users or custom applications can inspect and cause actions within the Operator such as provisioning resources or viewing status of resources.\nThis API is secured by a RBAC (role based access control) security model whereby each API call has a permission assigned to it. API roles are defined to provide granular authorization to Operator services.\nCommand Line Interface One of the unique features of the Operator is the pgo command line interface (CLI). This tool is used by a normal end-user to create databases or clusters, or make changes to existing databases.\nThe CLI interacts with the REST API deployed within the postgres-operator deployment.\nNode Affinity You can have the Operator add a node affinity section to a new Cluster Deployment if you want to cause Kubernetes to attempt to schedule a primary cluster to a specific Kubernetes node.\nYou can see the nodes on your Kube cluster by running the following:\nkubectl get nodes  You can then specify one of those names (e.g. kubeadm-node2) when creating a cluster;\npgo create cluster thatcluster --node-name=kubeadm-node2  The affinity rule inserted in the Deployment use a preferred strategy so that if the node were down or not available, Kubernetes will go ahead and schedule the Pod on another node.\nWhen you scale up a Cluster and add a replica, the scaling will take into account the use of --node-name. If it sees that a cluster was created with a specific node name, then the replica Deployment will add an affinity rule to attempt to schedule\nFail-over Manual and automated fail-over are supported in the Operator within a single Kubernetes cluster.\nManual failover is performed by API actions involving a query and then a target being specified to pick the fail-over replica target.\nAutomatic fail-over is performed by the Operator by evaluating the readiness of a primary. Automated fail-over can be globally specified for all clusters or specific clusters.\nUsers can configure the Operator to replace a failed primary with a new replica if they want that behavior.\nThe fail-over logic includes:\n deletion of the failed primary Deployment pick the best replica to become the new primary label change of the targeted Replica to match the primary Service execute the PostgreSQL promote command on the targeted replica  pgbackrest Integration The Operator integrates various features of the pgbackrest backup and restore project. A key component added to the Operator is the pgo-backrest-repo container, this container acts as a pgBackRest remote repository for the Postgres cluster to use for storing archive files and backups.\nThe following diagrams depicts some of the integration features:\nIn this diagram, starting from left to right we see the following:\n a user when they enter pgo backup mycluster \u0026ndash;backup-type=pgbackrest will cause a pgo-backrest container to be run as a Job, that container will execute a pgbackrest backup command in the pgBackRest repository container to perform the backup function.\n a user when they enter pgo show backup mycluster \u0026ndash;backup-type=pgbackrest will cause a pgbackrest info command to be executed on the pgBackRest repository container, the info output is sent directly back to the user to view\n the Postgres container itself will use an archive command, pgbackrest archive-push to send archives to the pgBackRest repository container\n the user entering pgo create cluster mycluster \u0026ndash;pgbackrest will cause a pgBackRest repository container deployment to be created, that repository is exclusively used for this Postgres cluster\n lastly, a user entering pgo restore mycluster will cause a pgo-backrest-restore container to be created as a Job, that container executes the pgbackrest restore command\n  pgbackrest Restore The pgbackrest restore command is implemented as the pgo restore command. This command is destructive in the sense that it is meant to restore a PG cluster meaning it will revert the PG cluster to a restore point that is kept in the pgbackrest repository. The prior primary data is not deleted but left in a PVC to be manually cleaned up by a DBA. The restored PG cluster will work against a new PVC created from the restore workflow.\nWhen doing a pgo restore, here is the workflow the Operator executes:\n turn off autofail if it is enabled for this PG cluster allocate a new PVC to hold the restored PG data delete the the current primary database deployment update the pgbackrest repo for this PG cluster with a new data path of the new PVC create a pgo-backrest-restore job, this job executes the pgbackrest restore command from the pgo-backrest-restore container, this Job mounts the newly created PVC once the restore job completes, a new primary Deployment is created which mounts the restored PVC volume  At this point the PG database is back in a working state. DBAs are still responsible to re-enable autofail using pgo update cluster and also perform a pgBackRest backup after the new primary is ready. This version of the Operator also does not handle any errors in the PG replicas after a restore, that is left for the DBA to handle.\nOther things to take into account before you do a restore:\n if a schedule has been created for this PG cluster, delete that schedule prior to performing a restore after a restore, exec into the PG primary and make sure the database has fully recovered by looking at the database logs, if not recovered, you might have to run psql command select pg_wal_replay_resume() to complete the recovery, on PG 9.6\u0026frasl;9.5 systems, the command you will use is select pg_xlog_replay_resume(). a pgBackRest restore is destructive in the sense that it deletes the existing primary deployment for the cluster prior to creating a new deployment containing the restored primary database. However, in the event that the pgBackRest restore job fails, the pgo restore command be can be run again, and instead of first deleting the primary deployment (since one no longer exists), a new primary will simply be created according to any options specified. Additionally, even though the original primary deployment will be deleted, the original primary PVC will remain. there is currently no Operator validation of user entered pgBackRest command options, you will need to make sure to enter these correctly, if not the pgBackRest restore command can fail. the restore workflow does not perform a backup after the restore nor does it verify that any replicas are in a working status after the restore, it is possible you might have to take actions on the replica to get them back to replicating with the new restored primary. pgbackrest.org suggests running a pgbackrest backup after a restore, this needs to be done by the DBA as part of a restore when performing a pgBackRest restore, the node-label flag can be utilized to target a specific node for both the pgBackRest restore job and the new (i.e. restored) primary deployment that is then created for the cluster. If a node label is not specified, the restore job will not target any specific node, and the restored primary deployment will inherit any node label\u0026rsquo;s defined for the original primary deployment.  PGO Scheduler The Operator includes a cronlike scheduler application called pgo-scheduler. Its purpose is to run automated tasks such as PostgreSQL backups or SQL policies against PostgreSQL clusters created by the Operator.\nPGO Scheduler watches Kubernetes for configmaps with the label crunchy-scheduler=true in the same namespace the Operator is deployed. The configmaps are json objects that describe the schedule such as:\n Cron like schedule such as: * * * * * Type of task: pgbackrest, pgbasebackup or policy  Schedules are removed automatically when the configmaps are deleted.\nPGO Scheduler uses the UTC timezone for all schedules.\nSchedule Expression Format Schedules are expressed using the following rules:\nField name | Mandatory? | Allowed values | Allowed special characters ---------- | ---------- | -------------- | -------------------------- Seconds | Yes | 0-59 | * / , - Minutes | Yes | 0-59 | * / , - Hours | Yes | 0-23 | * / , - Day of month | Yes | 1-31 | * / , - ? Month | Yes | 1-12 or JAN-DEC | * / , - Day of week | Yes | 0-6 or SUN-SAT | * / , - ?  pgBackRest Schedules pgBackRest schedules require pgBackRest enabled on the cluster to backup. The scheduler will not do this on its own.\npgBaseBackup Schedules pgBaseBackup schedules require a backup PVC to already be created. The operator will make this PVC using the backup commands:\npgo backup mycluster  Policy Schedules Policy schedules require a SQL policy already created using the Operator. Additionally users can supply both the database in which the policy should run and a secret that contains the username and password of the PostgreSQL role that will run the SQL. If no user is specified the scheduler will default to the replication user provided during cluster creation.\nCustom Resource Definitions The Operator makes use of custom resource definitions to maintain state and resource definitions as offered by the Operator.\nIn this above diagram, the CRDs heavily used by the Operator include:\n pgcluster - defines the Postgres cluster definition, new cluster requests are captured in a unique pgcluster resource for that Postgres cluster pgtask - workflow and other related administration tasks are captured within a set of pgtasks for a given pgcluster pgbackup - when you run a pgbasebackup, a pgbackup is created to hold the workflow and status of the last backup job, this CRD will eventually be deprecated in favor of a more general pgtask resource pgreplica - when you create a Postgres replica, a pgreplica CRD is created to define that replica  "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/developer-setup/",
	"title": "Developer Setup",
	"tags": [],
	"description": "",
	"content": " Developing The Postgres-Operator is an open source project hosted on GitHub.\nDevelopers that wish to build the Operator from source or contribute to the project via pull requests would set up a development environment through the following steps.\nCreate Kubernetes Cluster We use either OpenShift Container Platform or kubeadm to install development clusters.\nCreate a Local Development Host We currently build on CentOS and RHEL hosts. Others are possible, however we don\u0026rsquo;t support or test other Linux variants at this time.\nPerform Manual Install You can follow the manual installation method described in this documentation to make sure you can deploy from your local development host to your Kubernetes cluster.\nBuild Locally You can now build the Operator from source on local on your development host. Here are some steps to follow:\nGet Build Dependencies Run the following target to install a golang compiler, and any other build dependencies:\nmake setup  Compile You will build all the Operator binaries and Docker images by running:\nmake all  This assumes you have Docker installed and running on your development host.\nThe project uses the golang dep package manager to vendor all the golang source dependencies into the vendor directory. You typically don\u0026rsquo;t need to run any dep commands unless you are adding new golang package dependencies into the project outside of what is within the project for a given release.\nAfter a full compile, you will have a pgo binary in $HOME/odev/bin and the Operator images in your local Docker registry.\nRelease You can perform a release build by running:\nmake release  This will compile the Mac and Windows versions of pgo.\nDeploy Now that you have built the Operator images, you can push them to your Kubernetes cluster if that cluster is remote to your development host.\nYou would then run:\nmake deployoperator  To deploy the Operator on your Kubernetes cluster. If your Kubernetes cluster is not local to your development host, you will need to specify a config file that will connect you to your Kubernetes cluster. See the Kubernetes documentation for details.\nDebug Debug level logging in turned on by default when deploying the Operator.\nYou can view the REST API logs with the following alias:\nalias alog='kubectl logs `kubectl get pod --selector=name=postgres-operator -o jsonpath=\u0026quot;{.items[0].metadata.name}\u0026quot;` -c apiserver'  You can view the Operator core logic logs with the following alias:\nalias olog='kubectl logs `kubectl get pod --selector=name=postgres-operator -o jsonpath=\u0026quot;{.items[0].metadata.name}\u0026quot;` -c operator'  You can view the Scheduler logs with the following alias:\nalias slog='kubectl logs `kubectl get pod --selector=name=postgres-operator -o jsonpath=\u0026quot;{.items[0].metadata.name}\u0026quot;` -c scheduler'  You can enable the pgo CLI debugging with the following flag:\npgo version --debug  You can set the REST API URL as follows after a deployment if you are developing on your local host:\nalias setip='export CO_APISERVER_URL=https://`kubectl get service postgres-operator -o=jsonpath=\u0026quot;{.spec.clusterIP}\u0026quot;`:8443'  "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/security/",
	"title": "Security",
	"tags": [],
	"description": "",
	"content": " Kubernetes RBAC Install the requisite Operator RBAC resources, as a Kubernetes cluster admin user, by running a Makefile target:\nmake installrbac  This script creates the following RBAC resources on your Kubernetes cluster:\n   Setting Definition     Custom Resource Definitions pgbackups    pgclusters    pgpolicies    pgreplicas    pgtasks    pgupgrades   Cluster Roles pgopclusterrole    pgopclusterrolecrd    scheduler-sa   Cluster Role Bindings pgopclusterbinding    pgopclusterbindingcrd    scheduler-sa   Service Account scheduler-sa    postgres-operator    pgo-backrest    scheduler-sa   Roles pgo-role    pgo-backrest-role   Role Bindings pgo-backrest-role-binding    Operator RBAC The conf/postgresql-operator/pgorole file is read at start up time when the operator is deployed to the Kubernetes cluster. This file defines the Operator roles whereby Operator API users can be authorized.\nThe conf/postgresql-operator/pgouser file is read at start up time also and contains username, password, and role information as follows:\nusername:password:pgoadmin testuser:testpass:pgoadmin readonlyuser:testpass:pgoreader  A user creates a .pgouser file in their $HOME directory to identify themselves to the Operator. An entry in .pgouser will need to match entries in the conf/postgresql-operator/pgouser file. A sample .pgouser file contains the following:\nusername:password  The users pgouser file can also be located at: /etc/pgo/pgouser or it can be found at a path specified by the PGOUSER environment variable.\nThe following list shows the current complete list of possible pgo permissions:\n   Permission Description     ApplyPolicy allow pgo apply   CreateBackup allow pgo backup   CreateCluster allow pgo create cluster   CreateFailover allow pgo failover   CreatePgbouncer allow pgo create pgbouncer   CreatePgpool allow pgo create pgpool   CreatePolicy allow pgo create policy   CreateSchedule allow pgo create schedule   CreateUpgrade allow pgo upgrade   CreateUser allow pgo create user   DeleteBackup allow pgo delete backup   DeleteCluster allow pgo delete cluster   DeletePgbouncer allow pgo delete pgbouncer   DeletePgpool allow pgo delete pgpool   DeletePolicy allow pgo delete policy   DeleteSchedule allow pgo delete schedule   DeleteUpgrade allow pgo delete upgrade   DeleteUser allow pgo delete user   DfCluster allow pgo df   Label allow pgo label   Load allow pgo load   Reload allow pgo reload   Restore allow pgo restore   ShowBackup allow pgo show backup   ShowCluster allow pgo show cluster   ShowConfig allow pgo show config   ShowPolicy allow pgo show policy   ShowPVC allow pgo show pvc   ShowSchedule allow pgo show schedule   ShowUpgrade allow pgo show upgrade   ShowWorkflow allow pgo show workflow   Status allow pgo status   TestCluster allow pgo test   UpdateCluster allow pgo update cluster   User allow pgo user   Version allow pgo version    If the user is unauthorized for a pgo command, the user will get back this response:\nFATA[0000] Authentication Failed: 40  Making Security Changes The Operator today requires you to make Operator security changes in the pgouser and pgorole files, and for those changes to take effect you are required to re-deploy the Operator:\nmake deployoperator  This will recreate the pgo-auth-secret Secret that stores these files and is mounted by the Operator during its initialization.\nAPI Security The Operator REST API is secured with keys stored in the pgo-auth-secret Secret. Adjust the default keys to meet your security requirements using your own keys. The pgo-auth-secret Secret is created when you run:\nmake deployoperator  The keys are generated when the RBAC script is executed by the cluster admin:\nmake installrbac  "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/upgrade/",
	"title": "Upgrade",
	"tags": [],
	"description": "",
	"content": " Upgrading the Operator Various Operator releases will require action by the Operator administrator of your organization in order to upgrade to the next release of the Operator. Some upgrade steps are automated within the Operator but not all are possible at this time.\nThis section of the documentation shows specific steps required to the latest version from the previous version.\nUpgrading to Version 3.5.0 From Previous Versions  For clusters created in prior versions that used pgbackrest, you will be required to first create a pgbasebackup for those clusters, and after upgrading to Operator 3.5, you will need to restore those clusters from the pgbasebackup into a new cluster with \u0026ndash;pgbackrest enabled, this is due to the new pgbackrest shared repository being implemented in 3.5. This is a breaking change for anyone that used pgbackrest in Operator versions prior to 3.5. The pgingest CRD is removed. You will need to manually remove it from any deployments of the operator after upgrading to this version. This includes removing ingest related permissions from the pgorole file. Additionally, the API server now removes the ingest related API endpoints. Primary and replica labels are only applicable at cluster creation and are not updated after a cluster has executed a failover. A new service-name label is applied to PG cluster components to indicate whether a deployment/pod is a primary or replica. service-name is also the label now used by the cluster services to route with. This scheme allows for an almost immediate failover promotion and avoids the pod having to be bounced as part of a failover. Any existing PostgreSQL clusters will need to be updated to specify them as a primary or replica using the new service-name labeling scheme.\n The autofail label was moved from deployments and pods to just the pgcluster CRD to support autofail toggling. The storage configurations in pgo.yaml support the MatchLabels attribute for NFS storage. This will allow users to have more than a single NFS backend,. When set, this label (key=value) will be used to match the labels on PVs when a PVC is created. The UpdateCluster permission was added to the sample pgorole file to support the new pgo update CLI command. It was also added to the pgoperm file. The pgo.yaml adds the PreferredFailoverNode setting. This is a Kubernetes selector string (e.g. key=value). This value if set, will cause fail-over targets to be preferred based on the node they run on if that node is in the set of preferred. The ability to select nodes based on a selector string was added. For this to feature to be used, multiple replicas have to be in a ready state, and also at the same replication status. If those conditions are not met, the default fail-over target selection is used. The pgo.yaml file now includes a new storage configuration, XlogStorage, which when set will cause the xlog volume to be allocated using this storage configuration. If not set, the PrimaryStorage configuration will be used. The pgo.yaml file now includes a new storage configuration, BackrestStorage, will cause the pgbackrest shared repository volume to be allocated using this storage configuration. The pgo.yaml file now includes a setting, AutofailReplaceReplica, which will enable or disable whether a new replica is created as part of a fail-over. This is turned off by default.  See the GitHub Release notes for the features and other notes about a specific release.\n"
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/contributing/",
	"title": "Contributing",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/configuration/configuration/",
	"title": "Configuration Resources",
	"tags": [],
	"description": "",
	"content": " The operator is template-driven; this makes it simple to configure both the client and the operator.\nconf Directory The Operator is configured with a collection of files found in the conf directory. These configuration files are deployed to your Kubernetes cluster when the Operator is deployed. Changes made to any of these configuration files currently require a redeployment of the Operator on the Kubernetes cluster.\nThe server components of the Operator include Role Based Access Control resources which need to be created a single time by a Kubernetes cluster-admin user. See the Installation section for details on installing a Postgres Operator server.\nconf/postgres-operator/pgo.yaml The pgo.yaml file sets many different Operator configuration settings and is described in the pgo.yaml configuration documentation section.\nThe pgo.yaml file is deployed along with the other Operator configuration files when you run:\nmake deployoperator  conf/postgres-operator Directory Files within the conf/postgres-operator directory contain various templates that are used by the Operator when creating Kubernetes resources. In an advanced Operator deployment, administrators can modify these templates to add their own custom meta-data or make other changes to influence the Resources that get created on your Kubernetes cluster by the Operator.\nconf/postgres-operator/cluster Files within this directory are used specifically when creating PostgreSQL Cluster resources. Sidecar components such as pgBouncer and pgPool II templates are also located within this directory.\nAs with the other Operator templates, administrators can make custom changes to this set of templates to add custom features or metadata into the Resources created by the Operator.\nSecurity Security configuration is described in the Security section of this documentation.\n"
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/configuration/pgo-yaml-configuration/",
	"title": "PGO YAML",
	"tags": [],
	"description": "",
	"content": " pgo.yaml Configuration The pgo.yaml file contains many different configuration settings as described in this section of the documentation.\nThe pgo.yaml file is broken into major sections as described below:\nCluster    Setting Definition     BasicAuth if set to true will enable Basic Authentication   PrimaryNodeLabel newly created primary deployments will specify this node label if specified, unless you override it using the \u0026ndash;node-label command line flag, if not set, no node label is specifed   ReplicaNodeLabel newly created replica deployments will specify this node label if specified, unless you override it using the \u0026ndash;node-label command line flag, if not set, no node label is specifed   CCPImagePrefix newly created containers will be based on this image prefix (e.g. crunchydata), update this if you require a custom image prefix   CCPImageTag newly created containers will be based on this image version (e.g. centos7-11.1-2.3.0), unless you override it using the \u0026ndash;ccp-image-tag command line flag   Port the PostgreSQL port to use for new containers (e.g. 5432)   LogStatement postgresql.conf log_statement value (required field)   LogMinDurationStatement postgresql.conf log_min_duration_statement value (required field)   User the PostgreSQL normal user name   Strategy sets the deployment strategy to be used for deploying a cluster, currently there is only strategy 1   Replicas the number of cluster replicas to create for newly created clusters, typically users will scale up replicas on the pgo CLI command line but this global value can be set as well   PgmonitorPassword the password to use for pgmonitor metrics collection if you specify \u0026ndash;metrics when creating a PG cluster   Metrics boolean, if set to true will cause each new cluster to include crunchy-collect as a sidecar container for metrics collection, if set to false (default), users can still add metrics on a cluster-by-cluster basis using the pgo command flag \u0026ndash;metrics   Badger boolean, if set to true will cause each new cluster to include crunchy-pgbadger as a sidecar container for static log analysis, if set to false (default), users can still add pgbadger on a cluster-by-cluster basis using the pgo create cluster command flag \u0026ndash;pgbadger   Policies optional, list of policies to apply to a newly created cluster, comma separated, must be valid policies in the catalog   PasswordAgeDays optional, if set, will set the VALID UNTIL date on passwords to this many days in the future when creating users or setting passwords, defaults to 60 days   PasswordLength optional, if set, will determine the password length used when creating passwords, defaults to 8   ArchiveMode optional, if set to true will enable archive logging for all clusters created, default is false.   ArchiveTimeout optional, if set, will determine the archive timeout setting used when ArchiveMode is true, defaults to 60 seconds   ServiceType optional, if set, will determine the service type used when creating primary or replica services, defaults to ClusterIP if not set, can be overridden by the user on the command line as well   Backrest optional, if set, will cause clusters to have the pgbackrest volume PVC provisioned during cluster creation   BackrestPort currently required to be port 2022   Autofail optional, if set, will cause clusters to be checked for auto failover in the event of a non-Ready status   AutofailReplaceReplica optional, default is false, if set, will determine whether a replica is created as part of a failover to replace the promoted replica, the AutofailReplaceReplica setting in pgo.yaml is overrode with this command line flag if specified by a user.    Storage    Setting Definition     PrimaryStorage required, the value of the storage configuration to use for the primary PostgreSQL deployment   XlogStorage optional, the value of the storage configuration to use for the pgwal (archive) volume for the Postgres container /pgwal volume, if not set, the PrimaryStorage setting is used   BackupStorage required, the value of the storage configuration to use for backups, including the storage for pgbackrest repo volumes   ReplicaStorage required, the value of the storage configuration to use for the replica PostgreSQL deployments   ReplicaStorage required, the value of the storage configuration to use for the replica PostgreSQL deployments   BackrestStorage required, the value of the storage configuration to use for the pgbackrest shared repository deployment created when a user specifies pgbackrest to be enabled on a cluster   StorageClass for a dynamic storage type, you can specify the storage class used for storage provisioning(e.g. standard, gold, fast)   AccessMode the access mode for new PVCs (e.g. ReadWriteMany, ReadWriteOnce, ReadOnlyMany). See below for descriptions of these.   Size the size to use when creating new PVCs (e.g. 100M, 1Gi)   Storage.storage1.StorageType supported values are either dynamic, create, if not supplied, create is used   Fsgroup optional, if set, will cause a SecurityContext and fsGroup attributes to be added to generated Pod and Deployment definitions   SupplementalGroups optional, if set, will cause a SecurityContext to be added to generated Pod and Deployment definitions   MatchLabels optional, if set, will cause the PVC to add a matchlabels selector in order to match a PV, only useful when the StorageType is create, when specified a label of key=value is added to the PVC as a match criteria    Storage Configuration Examples In pgo.yaml, you will need to configure your storage configurations depending on which storage you are wanting to use for Operator provisioning of Persistent Volume Claims. The examples below are provided as a sample. In all the examples you are free to change the Size to meet your requirements of Persistent Volume Claim size.\nHostPath Example HostPath is provided for simple testing and use cases where you only intend to run on a single Linux host for your Kubernetes cluster.\n hostpathstorage: AccessMode: ReadWriteMany Size: 1G StorageType: create  NFS Example In the following NFS example, notice that the SupplementalGroups setting is set, this can be whatever GID you have your NFS mount set to, typically we set this nfsnobody as below. NFS file systems offer a ReadWriteMany access mode.\n nfsstorage: AccessMode: ReadWriteMany Size: 1G StorageType: create SupplementalGroups: 65534  Storage Class Example In the following example, the important attribute to set for a typical Storage Class is the Fsgroup setting. This value is almost always set to 26 which represents the Postgres user ID that the Crunchy Postgres container runs as. Most Storage Class providers offer ReadWriteOnce access modes, but refer to your provider documentation for other access modes it might support.\n storageos: AccessMode: ReadWriteOnce Size: 1G StorageType: dynamic StorageClass: fast Fsgroup: 26  Container Resources    Setting Definition     DefaultContainerResource optional, the value of the container resources configuration to use for all database containers, if not set, no resource limits or requests are added on the database container   DefaultLoadResource optional, the value of the container resources configuration to use for pgo-load containers, if not set, no resource limits or requests are added on the database container   DefaultLspvcResource optional, the value of the container resources configuration to use for pgo-lspvc containers, if not set, no resource limits or requests are added on the database container   DefaultRmdataResource optional, the value of the container resources configuration to use for pgo-rmdata containers, if not set, no resource limits or requests are added on the database container   DefaultBackupResource optional, the value of the container resources configuration to use for crunchy-backup containers, if not set, no resource limits or requests are added on the database container   DefaultPgbouncerResource optional, the value of the container resources configuration to use for crunchy-pgbouncer containers, if not set, no resource limits or requests are added on the database container   DefaultPgpoolResource optional, the value of the container resources configuration to use for crunchy-pgpool containers, if not set, no resource limits or requests are added on the database container   RequestsMemory request size of memory in bytes   RequestsCPU request size of CPU cores   LimitsMemory request size of memory in bytes   LimitsCPU request size of CPU cores    Miscellaneous (Pgo)    Setting Definition     PreferredFailoverNode optional, a label selector (e.g. hosttype=offsite) that if set, will be used to pick the failover target which is running on a host that matches this label if multiple targets are equal in replication status   LSPVCTemplate the PVC lspvc template file that lists PVC contents   LoadTemplate the load template file used for load jobs   COImagePrefix image tag prefix to use for the Operator containers   COImageTag image tag to use for the Operator containers   Audit boolean, if set to true will cause each apiserver call to be logged with an audit marking    Storage Configuration Details You can define n-number of Storage configurations within the pgo.yaml file. Those Storage configurations follow these conventions -\n they must have lowercase name (e.g. storage1) they must be unique names (e.g. mydrstorage, faststorage, slowstorage)  These Storage configurations are referenced in the BackupStorage, ReplicaStorage, and PrimaryStorage configuration values. However, there are command line options in the pgo client that will let a user override these default global values to offer you the user a way to specify very targeted storage configurations when needed (e.g. disaster recovery storage for certain backups).\nYou can set the storage AccessMode values to the following:\n ReadWriteMany - mounts the volume as read-write by many nodes ReadWriteOnce - mounts the PVC as read-write by a single node ReadOnlyMany - mounts the PVC as read-only by many nodes  These Storage configurations are validated when the pgo-apiserver starts, if a non-valid configuration is found, the apiserver will abort. These Storage values are only read at apiserver start time.\nThe following StorageType values are possible -\n dynamic - this will allow for dynamic provisioning of storage using a StorageClass. create - This setting allows for the creation of a new PVC for each PostgreSQL cluster using a naming convention of clustername. When set, the Size, AccessMode settings are used in constructing the new PVC.  The operator will create new PVCs using this naming convention: dbname where dbname is the database name you have specified. For example, if you run:\npgo create cluster example1  It will result in a PVC being created named example1 and in the case of a backup job, the pvc is named example1-backup\nNote, when Storage Type is create, you can specify a storage configuration setting of MatchLabels, when set, this will cause a selector of key=value to be added into the PVC, this will let you target specific PV(s) to be matched for this cluster. Note, if a PV does not match the claim request, then the cluster will not start. Users that want to use this feature have to place labels on their PV resources as part of PG cluster creation before creating the PG cluster. For example, users would add a label like this to their PV before they create the PG cluster:\nkubectl label pv somepv myzone=somezone  If you do not specify MatchLabels in the storage configuration, then no match filter is added and any available PV will be used to satisfy the PVC request. This option does not apply to dynamic storage types.\nExample PV creation scripts are provided that add labels to a set of PVs and can be used for testing: $COROOT/pv/create-pv-nfs-labels.sh in that example, a label of crunchyzone=red is set on a set of PVs to test with.\nThe pgo.yaml includes a storage config named nfsstoragered that when used will demonstrate the label matching. This feature allows you to support n-number of NFS storage configurations and supports spreading a PG cluster across different NFS storage configurations.\nContainer Resources Details In the pgo.yaml configuration file you have the option to configure a default container resources configuration that when set will add CPU and memory resource limits and requests values into each database container when the container is created.\nYou can also override the default value using the --resources-config command flag when creating a new cluster:\npgo create cluster testcluster --resources-config=large  Note, if you try to allocate more resources than your host or Kube cluster has available then you will see your pods wait in a Pending status. The output from a kubectl describe pod command will show output like this in this event: Events:\n Type Reason Age From Message ---- ------ ---- ---- ------- Warning FailedScheduling 49s (x8 over 1m) default-scheduler No nodes are available that match all of the predicates: Insufficient memory (1).  Overriding Storage Configuration Defaults pgo create cluster testcluster --storage-config=bigdisk  That example will create a cluster and specify a storage configuration of bigdisk to be used for the primary database storage. The replica storage will default to the value of ReplicaStorage as specified in pgo.yaml.\npgo create cluster testcluster2 --storage-config=fastdisk --replica-storage-config=slowdisk  That example will create a cluster and specify a storage configuration of fastdisk to be used for the primary database storage, while the replica storage will use the storage configuration slowdisk.\npgo backup testcluster --storage-config=offsitestorage  That example will create a backup and use the offsitestorage storage configuration for persisting the backup.\nUsing Storage Configurations for Disaster Recovery A simple mechanism for partial disaster recovery can be obtained by leveraging network storage, Kubernetes storage classes, and the storage configuration options within the Operator.\nFor example, if you define a Kubernetes storage class that refers to a storage backend that is running within your disaster recovery site, and then use that storage class as a storage configuration for your backups, you essentially have moved your backup files automatically to your disaster recovery site thanks to network storage.\n"
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/contributing/documentation-updates/",
	"title": "Updating Documentation",
	"tags": [],
	"description": "",
	"content": " Documentation The documentation website is generated using Hugo and https://pages.github.com/)[GitHub Pages]().\nHosting Hugo Locally (Optional) If you would like to build the documentation locally, view the official Installing Hugo guide to set up Hugo locally.\nYou can then start the server by running the following commands -\ncd $COROOT/hugo/ hugo server  The local version of the Hugo server is accessible by default from localhost:1313. Once you\u0026rsquo;ve run hugo server, that will let you interactively make changes to the documentation as desired and view the updates in real-time.\nContributing to the Documentation All documentation is in Markdown format and uses Hugo weights for positioning of the pages.\nThe current production release documentation is updated for every tagged major release.\nWhen you\u0026rsquo;re ready to commit a change, please verify that the documentation generates locally.\n"
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/contributing/issues/",
	"title": "Submitting Issues",
	"tags": [],
	"description": "",
	"content": "If you would like to submit an feature / issue for us to consider please submit an to the official GitHub Repository.\nIf you would like to work the issue, please add that information in the issue so that we can confirm we are not already working no need to duplicate efforts.\nIf you have any question you can submit a Support - Question and Answer issue and we will work with you on how you can get more involved.\n"
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/contributing/pull-requests/",
	"title": "Submitting Pull Requests",
	"tags": [],
	"description": "",
	"content": "So you decided to submit an issue and work it. Great! Let\u0026rsquo;s get it merged in to the codebase. The following will go a long way to helping get the fix merged in quicker.\n Create a Pull Request from your Fork to the Develop branch. Update the checklists in the Pull Request Description. Reference which issues this Pull Request is resolving.  "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/",
	"title": "Clis",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/",
	"title": "Crunchy Data Postgres Operator",
	"tags": [],
	"description": "",
	"content": " Latest Release: 3.5.1\nThe postgres-operator is a controller that runs within a Kubernetes cluster that provides a means to deploy and manage PostgreSQL clusters.\nUse the postgres-operator to:\n deploy PostgreSQL containers including streaming replication clusters scale up PostgreSQL clusters with extra replicas add pgpool, pgbouncer, and metrics sidecars to PostgreSQL clusters apply SQL policies to PostgreSQL clusters assign metadata tags to PostgreSQL clusters maintain PostgreSQL users and passwords perform minor upgrades to PostgreSQL clusters load simple CSV and JSON files into PostgreSQL clusters perform database backups  Deployment Requirements The Operator deploys on Kubernetes and OpenShift clusters. Some form of storage is required, NFS, HostPath, and Storage Classes are currently supported.\nThe Operator includes various components that get deployed to your Kubernetes cluster as shown in the following diagram and detailed in the Design.\nThe Operator is developed and tested on CentOS and RHEL Linux platforms but is known to run on other Linux variants.\nDocumentation The following documentation is provided:\n pgo CLI Syntax and Examples Installation Configuration pgo.yaml Configuration Security Design Overview Developing Upgrading the Operator Contributing  "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo/",
	"title": "pgo",
	"tags": [],
	"description": "",
	"content": " pgo The pgo command line interface.\nSynopsis The pgo command line interface lets you create and manage PostgreSQL clusters.\nOptions  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. -h, --help help for pgo --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo apply - Apply a policy pgo backup - Perform a Backup pgo create - Create a Cluster, PGBouncer, PGPool, Policy, Schedule, or User pgo delete - Delete a backup, cluster, pgbouncer, pgpool, label, policy, upgrade, or user pgo df - Display disk space for clusters pgo failover - Performs a manual failover pgo label - Label a set of clusters pgo load - Perform a data load pgo reload - Perform a cluster reload pgo restore - Perform a restore from previous backup pgo scale - Scale a PostgreSQL cluster pgo scaledown - Scale down a PostgreSQL cluster pgo show - Show the description of a cluster pgo status - Display PostgreSQL cluster status pgo test - Test cluster connectivity pgo update - Update a cluster pgo upgrade - Perform an upgrade pgo user - Manage PostgreSQL users pgo version - Print version information for the PostgreSQL Operator  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_apply/",
	"title": "pgo_apply",
	"tags": [],
	"description": "",
	"content": " pgo apply Apply a policy\nSynopsis APPLY allows you to apply a Policy to a set of clusters. For example:\npgo apply mypolicy1 --selector=name=mycluster pgo apply mypolicy1 --selector=someotherpolicy pgo apply mypolicy1 --selector=someotherpolicy --dry-run  pgo apply [flags]  Options  --dry-run Shows the clusters that the label would be applied to, without labelling them. -h, --help help for apply -s, --selector string The selector to use for cluster filtering.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo - The pgo command line interface.  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_backup/",
	"title": "pgo_backup",
	"tags": [],
	"description": "",
	"content": " pgo backup Perform a Backup\nSynopsis BACKUP performs a Backup, for example:\npgo backup mycluster\npgo backup [flags]  Options  --backup-opts string The pgbackup options to pass into pgbasebackup or pgbackrest. --backup-type string The backup type to perform. Default is pgbasebackup. Valid backup types are pgbasebackup, pgbackrest and pgdump. -h, --help help for backup --pvc-name string The PVC name to use for the backup instead of the default. -s, --selector string The selector to use for cluster filtering. --storage-config string The name of a Storage config in pgo.yaml to use for the cluster storage. Only applies to pgbasebackup backups.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo - The pgo command line interface.  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_clidoc/",
	"title": "pgo_clidoc",
	"tags": [],
	"description": "",
	"content": " pgo clidoc Generate Markdown of CLI commandes\nSynopsis The clidoc command allows you to generate markdown files for all CLI commands:\npgo clidoc  pgo clidoc [flags]  Options  -h, --help help for clidoc  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo - The pgo command line interface.  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_create/",
	"title": "pgo_create",
	"tags": [],
	"description": "",
	"content": " pgo create Create a Cluster, PGBouncer, PGPool, Policy, Schedule, or User\nSynopsis CREATE allows you to create a new Cluster, PGBouncer, PGPool, Policy, Schedule or User. For example:\npgo create cluster pgo create pgbouncer pgo create pgpool pgo create policy pgo create user  pgo create [flags]  Options  -h, --help help for create  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo - The pgo command line interface. pgo create cluster - Create a PostgreSQL cluster pgo create pgbouncer - Create a pgbouncer pgo create pgpool - Create a pgpool pgo create policy - Create a SQL policy pgo create schedule - Create a cron-like scheduled task pgo create user - Create a PostgreSQL user  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_create_cluster/",
	"title": "pgo_create_cluster",
	"tags": [],
	"description": "",
	"content": " pgo create cluster Create a PostgreSQL cluster\nSynopsis Create a PostgreSQL cluster consisting of a primary and a number of replica backends. For example:\npgo create cluster mycluster  pgo create cluster [flags]  Options  --archive Enables archive logging for the database cluster. --autofail If set, will cause autofailover to be enabled on this cluster. -x, --backup-path string The backup archive path to restore from. -p, --backup-pvc string The backup archive PVC to restore from. --ccp-image string The CCPImage name to use for cluster creation. If specified, overrides the value crunchy-postgres. -c, --ccp-image-tag string The CCPImageTag to use for cluster creation. If specified, overrides the pgo.yaml setting. --custom-config string The name of a configMap that holds custom PostgreSQL configuration files used to override defaults. -h, --help help for cluster -l, --labels string The labels to apply to this cluster. --metrics Adds the crunchy-collect container to the database pod. --node-label string The node label (key=value) to use in placing the primary database. If not set, any node is used. -w, --password string The password to use for initial database users. --pgbackrest Enables a pgBackRest volume for the database pod. --pgbadger Adds the crunchy-pgbadger container to the database pod. --pgbouncer Adds a crunchy-pgbouncer deployment to the cluster. --pgpool Adds the crunchy-pgpool container to the database pod. --pgpool-secret string The name of a pgpool secret to use for the pgpool configuration. -z, --policies string The policies to apply when creating a cluster, comma separated. --replica-count int The number of replicas to create as part of the cluster. --replica-storage-config string The name of a Storage config in pgo.yaml to use for the cluster replica storage. -r, --resources-config string The name of a container resource configuration in pgo.yaml that holds CPU and memory requests and limits. -s, --secret-from string The cluster name to use when restoring secrets. -e, --series int The number of clusters to create in a series. (default 1) --service-type string The Service type to use for the PostgreSQL cluster. If not set, the pgo.yaml default will be used. --storage-config string The name of a Storage config in pgo.yaml to use for the cluster storage.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo create - Create a Cluster, PGBouncer, PGPool, Policy, Schedule, or User  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_create_pgbouncer/",
	"title": "pgo_create_pgbouncer",
	"tags": [],
	"description": "",
	"content": " pgo create pgbouncer Create a pgbouncer\nSynopsis Create a pgbouncer. For example:\npgo create pgbouncer mycluster  pgo create pgbouncer [flags]  Options  -h, --help help for pgbouncer  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo create - Create a Cluster, PGBouncer, PGPool, Policy, Schedule, or User  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_create_pgpool/",
	"title": "pgo_create_pgpool",
	"tags": [],
	"description": "",
	"content": " pgo create pgpool Create a pgpool\nSynopsis Create a pgpool. For example:\npgo create pgpool mycluster  pgo create pgpool [flags]  Options  -h, --help help for pgpool --pgpool-secret string The name of a pgpool secret to use for the pgpool configuration.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo create - Create a Cluster, PGBouncer, PGPool, Policy, Schedule, or User  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_create_policy/",
	"title": "pgo_create_policy",
	"tags": [],
	"description": "",
	"content": " pgo create policy Create a SQL policy\nSynopsis Create a policy. For example:\npgo create policy mypolicy --in-file=/tmp/mypolicy.sql  pgo create policy [flags]  Options  -h, --help help for policy -i, --in-file string The policy file path to use for adding a policy. -u, --url string The url to use for adding a policy.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo create - Create a Cluster, PGBouncer, PGPool, Policy, Schedule, or User  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_create_schedule/",
	"title": "pgo_create_schedule",
	"tags": [],
	"description": "",
	"content": " pgo create schedule Create a cron-like scheduled task\nSynopsis Schedule creates a cron-like scheduled task. For example:\npgo create schedule --schedule=\u0026quot;* * * * *\u0026quot; --schedule-type=pgbackrest --pgbackrest-backup-type=full mycluster  pgo create schedule [flags]  Options  -c, --ccp-image-tag string The CCPImageTag to use for cluster creation. If specified, overrides the pgo.yaml setting. --database string The database to run the SQL policy against. -h, --help help for schedule --pgbackrest-backup-type string The type of pgBackRest backup to schedule (full or diff). --policy string The policy to use for SQL schedules. --pvc-name string The name of the backup PVC to use (only used in pgbasebackup schedules). --schedule string The schedule assigned to the cron task. --schedule-opts string The custom options passed to the create schedule API. --schedule-type string The type of schedule to be created (pgbackrest, pgbasebackup or policy). --secret string The secret name for the username and password of the PostgreSQL role for SQL schedules. -s, --selector string The selector to use for cluster filtering.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo create - Create a Cluster, PGBouncer, PGPool, Policy, Schedule, or User  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_create_user/",
	"title": "pgo_create_user",
	"tags": [],
	"description": "",
	"content": " pgo create user Create a PostgreSQL user\nSynopsis Create a postgres user. For example:\npgo create user manageduser --managed --selector=name=mycluster pgo create user user1 --selector=name=mycluster  pgo create user [flags]  Options  --db string Grants the user access to a database. -h, --help help for user --managed Creates a user with secrets that can be managed by the Operator. --password string The password to use for creating a new user which overrides a generated password. --password-length int If no password is supplied, this is the length of the auto generated password (default 12) -s, --selector string The selector to use for cluster filtering. --valid-days int Sets passwords for new users to X days. (default 30)  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo create - Create a Cluster, PGBouncer, PGPool, Policy, Schedule, or User  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_delete/",
	"title": "pgo_delete",
	"tags": [],
	"description": "",
	"content": " pgo delete Delete a backup, cluster, pgbouncer, pgpool, label, policy, upgrade, or user\nSynopsis The delete command allows you to delete a backup, cluster, label, pgbouncer, pgpool, policy, upgrade, or user. For example:\npgo delete user testuser --selector=name=mycluster pgo delete policy mypolicy pgo delete cluster mycluster pgo delete pgbouncer mycluster pgo delete pgpool mycluster pgo delete label mycluster --label=env=research pgo delete cluster mycluster --delete-data pgo delete cluster mycluster --delete-data --delete-backups pgo delete backup mycluster pgo delete upgrade mycluster pgo delete schedule mycluster pgo delete schedule --selector=name=mycluster pgo delete schedule --schedule-name=mycluster-pgbackrest-full  pgo delete [flags]  Options  -h, --help help for delete  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo - The pgo command line interface. pgo delete backup - Delete a backup pgo delete cluster - Delete a PostgreSQL cluster pgo delete label - Delete a label from clusters pgo delete pgbouncer - Delete a pgbouncer from a cluster pgo delete pgpool - Delete a pgpool from a cluster pgo delete policy - Delete a SQL policy pgo delete schedule - Delete a schedule pgo delete upgrade - Delete an upgrade pgo delete user - Delete a user  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_delete_backup/",
	"title": "pgo_delete_backup",
	"tags": [],
	"description": "",
	"content": " pgo delete backup Delete a backup\nSynopsis Delete a backup. For example:\npgo delete backup mydatabase  pgo delete backup [flags]  Options  -h, --help help for backup  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo delete - Delete a backup, cluster, pgbouncer, pgpool, label, policy, upgrade, or user  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_delete_cluster/",
	"title": "pgo_delete_cluster",
	"tags": [],
	"description": "",
	"content": " pgo delete cluster Delete a PostgreSQL cluster\nSynopsis Delete a PostgreSQL cluster. For example:\npgo delete cluster all pgo delete cluster mycluster  pgo delete cluster [flags]  Options  -b, --delete-backups Causes the backups for this cluster to be removed permanently. -d, --delete-data Causes the data for this cluster to be removed permanently. -h, --help help for cluster -n, --no-prompt No command line confirmation. -s, --selector string The selector to use for cluster filtering.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo delete - Delete a backup, cluster, pgbouncer, pgpool, label, policy, upgrade, or user  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_delete_label/",
	"title": "pgo_delete_label",
	"tags": [],
	"description": "",
	"content": " pgo delete label Delete a label from clusters\nSynopsis Delete a label from clusters. For example:\npgo delete label mycluster --label=env=research pgo delete label all --label=env=research pgo delete label --selector=group=southwest --label=env=research  pgo delete label [flags]  Options  -h, --help help for label --label string The label to delete for any selected or specified clusters. -s, --selector string The selector to use for cluster filtering.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo delete - Delete a backup, cluster, pgbouncer, pgpool, label, policy, upgrade, or user  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_delete_pgbouncer/",
	"title": "pgo_delete_pgbouncer",
	"tags": [],
	"description": "",
	"content": " pgo delete pgbouncer Delete a pgbouncer from a cluster\nSynopsis Delete a pgbouncer from a cluster. For example:\npgo delete pgbouncer mycluster  pgo delete pgbouncer [flags]  Options  -h, --help help for pgbouncer -s, --selector string The selector to use for cluster filtering.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo delete - Delete a backup, cluster, pgbouncer, pgpool, label, policy, upgrade, or user  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_delete_pgpool/",
	"title": "pgo_delete_pgpool",
	"tags": [],
	"description": "",
	"content": " pgo delete pgpool Delete a pgpool from a cluster\nSynopsis Delete a pgpool from a cluster. For example:\npgo delete pgpool mycluster  pgo delete pgpool [flags]  Options  -h, --help help for pgpool -s, --selector string The selector to use for cluster filtering.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo delete - Delete a backup, cluster, pgbouncer, pgpool, label, policy, upgrade, or user  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_delete_policy/",
	"title": "pgo_delete_policy",
	"tags": [],
	"description": "",
	"content": " pgo delete policy Delete a SQL policy\nSynopsis Delete a policy. For example:\npgo delete policy mypolicy  pgo delete policy [flags]  Options  -h, --help help for policy -n, --no-prompt No command line confirmation.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo delete - Delete a backup, cluster, pgbouncer, pgpool, label, policy, upgrade, or user  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_delete_schedule/",
	"title": "pgo_delete_schedule",
	"tags": [],
	"description": "",
	"content": " pgo delete schedule Delete a schedule\nSynopsis Delete a cron-like schedule. For example:\npgo delete schedule mycluster pgo delete schedule --selector=env=test pgo delete schedule --schedule-name=mycluster-pgbackrest-full  pgo delete schedule [flags]  Options  -h, --help help for schedule -n, --no-prompt No command line confirmation. --schedule-name string The name of the schedule to delete. -s, --selector string The selector to use for cluster filtering.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo delete - Delete a backup, cluster, pgbouncer, pgpool, label, policy, upgrade, or user  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_delete_upgrade/",
	"title": "pgo_delete_upgrade",
	"tags": [],
	"description": "",
	"content": " pgo delete upgrade Delete an upgrade\nSynopsis Delete an upgrade. For example:\npgo delete upgrade mydatabase  pgo delete upgrade [flags]  Options  -h, --help help for upgrade  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo delete - Delete a backup, cluster, pgbouncer, pgpool, label, policy, upgrade, or user  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_delete_user/",
	"title": "pgo_delete_user",
	"tags": [],
	"description": "",
	"content": " pgo delete user Delete a user\nSynopsis Delete a user. For example:\npgo delete user someuser --selector=name=mycluster  pgo delete user [flags]  Options  -h, --help help for user -s, --selector string The selector to use for cluster filtering.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo delete - Delete a backup, cluster, pgbouncer, pgpool, label, policy, upgrade, or user  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_df/",
	"title": "pgo_df",
	"tags": [],
	"description": "",
	"content": " pgo df Display disk space for clusters\nSynopsis Displays the disk status for PostgreSQL clusters. For example:\npgo df mycluster pgo df all pgo df --selector=env=research  pgo df [flags]  Options  -h, --help help for df -s, --selector string The selector to use for cluster filtering.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo - The pgo command line interface.  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_failover/",
	"title": "pgo_failover",
	"tags": [],
	"description": "",
	"content": " pgo failover Performs a manual failover\nSynopsis Performs a manual failover. For example:\npgo failover mycluster  pgo failover [flags]  Options  --autofail-replace-replica string If 'true', causes a replica to be created to replace the promoted replica. If 'false', causes a replica to not be created, if not set, the pgo.yaml AutofailReplaceReplica setting is used. -h, --help help for failover -n, --no-prompt No command line confirmation. --query Prints the list of failover candidates. --target string The replica target which the failover will occur on.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo - The pgo command line interface.  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_label/",
	"title": "pgo_label",
	"tags": [],
	"description": "",
	"content": " pgo label Label a set of clusters\nSynopsis LABEL allows you to add or remove a label on a set of clusters. For example:\npgo label mycluster yourcluster --label=environment=prod pgo label all --label=environment=prod pgo label --label=environment=prod --selector=name=mycluster pgo label --label=environment=prod --selector=status=final --dry-run  pgo label [flags]  Options  --dry-run Shows the clusters that the label would be applied to, without labelling them. -h, --help help for label --label string The new label to apply for any selected or specified clusters. -s, --selector string The selector to use for cluster filtering.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo - The pgo command line interface.  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_load/",
	"title": "pgo_load",
	"tags": [],
	"description": "",
	"content": " pgo load Perform a data load\nSynopsis LOAD performs a load. For example:\npgo load --load-config=./load.json --selector=project=xray  pgo load [flags]  Options  -h, --help help for load --load-config string The load configuration to use that defines the load job. --policies string The policies to apply before loading a file, comma separated. -s, --selector string The selector to use for cluster filtering.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo - The pgo command line interface.  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_reload/",
	"title": "pgo_reload",
	"tags": [],
	"description": "",
	"content": " pgo reload Perform a cluster reload\nSynopsis RELOAD performs a PostgreSQL reload on a cluster or set of clusters. For example:\npgo reload mycluster  pgo reload [flags]  Options  -h, --help help for reload -n, --no-prompt No command line confirmation. -s, --selector string The selector to use for cluster filtering.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo - The pgo command line interface.  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_restore/",
	"title": "pgo_restore",
	"tags": [],
	"description": "",
	"content": " pgo restore Perform a restore from previous backup\nSynopsis RESTORE performs a restore to a new PostgreSQL cluster. This includes stopping the database and recreating a new primary with the restored data. Valid backup types to restore from are pgbackrest and pgdump. For example:\npgo restore mycluster  pgo restore [flags]  Options  --backup-opts string The restore options for pgbackrest or pgdump. --backup-pvc string The PVC containing the pgdump directory to restore from. --backup-type string The type of backup to restore from, default is pgbackrest. Valid types are pgbackrest or pgdump. -h, --help help for restore -n, --no-prompt No command line confirmation. --node-label string The node label (key=value) to use when scheduling the restore job, and in the case of a pgBackRest restore, also the new (i.e. restored) primary deployment. If not set, any node is used. --pitr-target string The PITR target, being a PostgreSQL timestamp such as '2018-08-13 11:25:42.582117-04'.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo - The pgo command line interface.  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_scale/",
	"title": "pgo_scale",
	"tags": [],
	"description": "",
	"content": " pgo scale Scale a PostgreSQL cluster\nSynopsis The scale command allows you to adjust a Cluster\u0026rsquo;s replica configuration. For example:\npgo scale mycluster --replica-count=1  pgo scale [flags]  Options  --ccp-image-tag string The CCPImageTag to use for cluster creation. If specified, overrides the .pgo.yaml setting. -h, --help help for scale -n, --no-prompt No command line confirmation. --node-label string The node label (key) to use in placing the primary database. If not set, any node is used. --replica-count int The replica count to apply to the clusters. (default 1) --resources-config string The name of a container resource configuration in pgo.yaml that holds CPU and memory requests and limits. --service-type string The service type to use in the replica Service. If not set, the default in pgo.yaml will be used. --storage-config string The name of a Storage config in pgo.yaml to use for the replica storage.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo - The pgo command line interface.  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_scaledown/",
	"title": "pgo_scaledown",
	"tags": [],
	"description": "",
	"content": " pgo scaledown Scale down a PostgreSQL cluster\nSynopsis The scale command allows you to scale down a Cluster\u0026rsquo;s replica configuration. For example:\nTo list targetable replicas: pgo scaledown mycluster --query To scale down a specific replica: pgo scaledown mycluster --target=mycluster-replica-xxxx  pgo scaledown [flags]  Options  -d, --delete-data Causes the data for the scaled down replica to be removed permanently. -h, --help help for scaledown -n, --no-prompt No command line confirmation. --query Prints the list of targetable replica candidates. --target string The replica to target for scaling down  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo - The pgo command line interface.  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_show/",
	"title": "pgo_show",
	"tags": [],
	"description": "",
	"content": " pgo show Show the description of a cluster\nSynopsis Show allows you to show the details of a policy, backup, pvc, or cluster. For example:\npgo show backup mycluster pgo show backup mycluster --backup-type=pgbackrest pgo show cluster mycluster pgo show config pgo show policy policy1 pgo show pvc mycluster pgo show workflow 25927091-b343-4017-be4b-71575f0b3eb5 pgo show user mycluster  pgo show [flags]  Options  -h, --help help for show  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo - The pgo command line interface. pgo show backup - Show backup information pgo show cluster - Show cluster information pgo show config - Show configuration information pgo show policy - Show policy information pgo show pvc - Show PVC information pgo show schedule - Show schedule information pgo show upgrade - Show upgrade information pgo show user - Show user information pgo show workflow - Show workflow information  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_show_backup/",
	"title": "pgo_show_backup",
	"tags": [],
	"description": "",
	"content": " pgo show backup Show backup information\nSynopsis Show backup information. For example:\npgo show backup mycluser  pgo show backup [flags]  Options  --backup-type string The backup type output to list. Valid choices are pgbasebackup (default) or pgbackrest. -h, --help help for backup  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo show - Show the description of a cluster  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_show_cluster/",
	"title": "pgo_show_cluster",
	"tags": [],
	"description": "",
	"content": " pgo show cluster Show cluster information\nSynopsis Show a PostgreSQL cluster. For example:\npgo show cluster all pgo show cluster mycluster  pgo show cluster [flags]  Options  --ccp-image-tag string Filter the results based on the image tag of the cluster. -h, --help help for cluster -o, --output string The output format. Currently, json is the only supported value. -s, --selector string The selector to use for cluster filtering.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo show - Show the description of a cluster  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_show_config/",
	"title": "pgo_show_config",
	"tags": [],
	"description": "",
	"content": " pgo show config Show configuration information\nSynopsis Show configuration information for the Operator. For example:\npgo show config  pgo show config [flags]  Options  -h, --help help for config  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo show - Show the description of a cluster  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_show_policy/",
	"title": "pgo_show_policy",
	"tags": [],
	"description": "",
	"content": " pgo show policy Show policy information\nSynopsis Show policy information. For example:\npgo show policy policy1  pgo show policy [flags]  Options  -h, --help help for policy  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo show - Show the description of a cluster  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_show_pvc/",
	"title": "pgo_show_pvc",
	"tags": [],
	"description": "",
	"content": " pgo show pvc Show PVC information\nSynopsis Show PVC information. For example:\npgo show pvc mycluster pgo show pvc mycluster-backup pgo show pvc mycluster-xlog pgo show pvc a2-backup --pvc-root=a2-backups/2019-01-12-17-09-42  pgo show pvc [flags]  Options  -h, --help help for pvc --pvc-root string The PVC directory to list.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo show - Show the description of a cluster  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_show_schedule/",
	"title": "pgo_show_schedule",
	"tags": [],
	"description": "",
	"content": " pgo show schedule Show schedule information\nSynopsis Show cron-like schedules. For example:\npgo show schedule mycluster pgo show schedule --selector=pg-cluster=mycluster pgo show schedule --schedule-name=mycluster-pgbackrest-full  pgo show schedule [flags]  Options  -h, --help help for schedule -n, --no-prompt No command line confirmation. --schedule-name string The name of the schedule to show. -s, --selector string The selector to use for cluster filtering.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo show - Show the description of a cluster  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_show_upgrade/",
	"title": "pgo_show_upgrade",
	"tags": [],
	"description": "",
	"content": " pgo show upgrade Show upgrade information\nSynopsis Show upgrade information. For example:\npgo show upgrade mycluster  pgo show upgrade [flags]  Options  -h, --help help for upgrade  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo show - Show the description of a cluster  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_show_user/",
	"title": "pgo_show_user",
	"tags": [],
	"description": "",
	"content": " pgo show user Show user information\nSynopsis Show users on a cluster. For example:\npgo show user mycluster  pgo show user [flags]  Options  --expired string Shows passwords that will expire in X days. -h, --help help for user -s, --selector string The selector to use for cluster filtering.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo show - Show the description of a cluster  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_show_workflow/",
	"title": "pgo_show_workflow",
	"tags": [],
	"description": "",
	"content": " pgo show workflow Show workflow information\nSynopsis Show workflow information for a given workflow. For example:\npgo show workflow 25927091-b343-4017-be4b-71575f0b3eb5  pgo show workflow [flags]  Options  -h, --help help for workflow  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo show - Show the description of a cluster  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_status/",
	"title": "pgo_status",
	"tags": [],
	"description": "",
	"content": " pgo status Display PostgreSQL cluster status\nSynopsis Display namespace wide information for PostgreSQL clusters. For example:\npgo status  pgo status [flags]  Options  -h, --help help for status -o, --output string The output format. Currently, json is the only supported value.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo - The pgo command line interface.  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_test/",
	"title": "pgo_test",
	"tags": [],
	"description": "",
	"content": " pgo test Test cluster connectivity\nSynopsis TEST allows you to test the connectivity for a cluster. For example:\npgo test mycluster pgo test --selector=env=research pgo test all  pgo test [flags]  Options  -h, --help help for test -o, --output string The output format. Currently, json is the only supported value. -s, --selector string The selector to use for cluster filtering.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo - The pgo command line interface.  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_update/",
	"title": "pgo_update",
	"tags": [],
	"description": "",
	"content": " pgo update Update a cluster\nSynopsis The update command allows you to update a cluster. For example:\npgo update cluster mycluster --autofail=false pgo update cluster mycluster --autofail=true  pgo update [flags]  Options  -h, --help help for update  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo - The pgo command line interface. pgo update cluster - Update a PostgreSQL cluster  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_update_cluster/",
	"title": "pgo_update_cluster",
	"tags": [],
	"description": "",
	"content": " pgo update cluster Update a PostgreSQL cluster\nSynopsis Update a PostgreSQL cluster. For example:\npgo update cluster all --autofail=false pgo update cluster mycluster --autofail=true  pgo update cluster [flags]  Options  --autofail string If set, will cause the autofail label on the pgcluster CRD for this cluster to be updated to either true or false, valid values are true or false. -h, --help help for cluster -n, --no-prompt No command line confirmation. -s, --selector string The selector to use for cluster filtering.  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo update - Update a cluster  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_upgrade/",
	"title": "pgo_upgrade",
	"tags": [],
	"description": "",
	"content": " pgo upgrade Perform an upgrade\nSynopsis UPGRADE performs an upgrade on a PostgreSQL cluster. For example:\npgo upgrade mycluster\npgo upgrade [flags]  Options  --ccp-image-tag string The CCPImageTag to use for cluster creation. If specified, overrides the pgo.yaml setting. -h, --help help for upgrade  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo - The pgo command line interface.  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_user/",
	"title": "pgo_user",
	"tags": [],
	"description": "",
	"content": " pgo user Manage PostgreSQL users\nSynopsis USER allows you to manage users and passwords across a set of clusters. For example:\npgo user --selector=name=mycluster --update-passwords pgo user --change-password=bob --selector=name=mycluster --password=newpass  pgo user [flags]  Options  --change-password string Updates the password for a user on selective clusters. --db string Grants the user access to a database. --expired string required flag when updating passwords that will expire in X days using --update-passwords flag. -h, --help help for user --password string Specifies the user password when updating a user password or creating a new user. --password-length int If no password is supplied, this is the length of the auto generated password (default 12) -s, --selector string The selector to use for cluster filtering. --update-passwords Performs password updating on expired passwords. --valid-days int Sets passwords for new users to X days. (default 30)  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo - The pgo command line interface.  Auto generated by spf13/cobra on 21-Feb-2019 "
},
{
	"uri": "https://crunchydata.github.io/postgres-operator/3.5.1/cli/pgo_version/",
	"title": "pgo_version",
	"tags": [],
	"description": "",
	"content": " pgo version Print version information for the PostgreSQL Operator\nSynopsis VERSION allows you to print version information for the postgres-operator. For example:\npgo version  pgo version [flags]  Options  -h, --help help for version  Options inherited from parent commands  --apiserver-url string The URL for the PostgreSQL Operator apiserver. --debug Enable debugging when true. --namespace string The namespace to use for pgo requests. --pgo-ca-cert string The CA Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-cert string The Client Certificate file path for authenticating to the PostgreSQL Operator apiserver. --pgo-client-key string The Client Key file path for authenticating to the PostgreSQL Operator apiserver.  SEE ALSO  pgo - The pgo command line interface.  Auto generated by spf13/cobra on 21-Feb-2019 "
}]