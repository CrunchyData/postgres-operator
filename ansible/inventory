localhost ansible_connection=local ansible_python_interpreter="/usr/bin/env python"

[all:vars]

crunchy_debug='false'

# ==================
# Kuberenetes and OpenShift Settings
# Note: Either Kubernetes or OpenShift must be used

# Deploy into Openshift
# ==================
# Note: openshift_host can use the format https://URL:PORT
# Note: openshift_token can be used for token authentication
# ==================
# openshift_host=''
# openshift_skip_tls_verify=true
# openshift_user=''
# openshift_password=''
# openshift_token=''

# Deploy into Kubernetes
# ==================
# Note: Context name can be found using:
#   kubectl config current-context
# ==================
# kubernetes_context=''

# Create RBAC
# ==================
# Note: you may disable creating RBAC resources if they where already
# provisoned by a cluster admin.
# ==================
create_rbac='true'

# ===================
# PGO Settings
# The following settings configure the Crunchy PostgreSQL Operator 
# functionality.
# ===================

# The name of the PGO installation
pgo_installation_name='devtest'

# PGO Admin Credentials
pgo_admin_username='admin'
pgo_admin_password=''

# PGO Admin Role & Permissions
pgo_admin_role_name='pgoadmin'
pgo_admin_perms='DeleteNamespace,CreateNamespace,UpdatePgorole,ShowPgorole,DeletePgorole,CreatePgorole,UpdatePgouser,ShowPgouser,DeletePgouser,CreatePgouser,Cat,Ls,ShowNamespace,CreateDump,RestoreDump,ScaleCluster,CreateSchedule,DeleteSchedule,ShowSchedule,DeletePgbouncer,CreatePgbouncer,DeletePgpool,CreatePgpool,Restore,RestorePgbasebackup,ShowSecrets,Reload,ShowConfig,Status,DfCluster,DeleteCluster,ShowCluster,CreateCluster,TestCluster,ShowBackup,DeleteBackup,CreateBackup,Label,Load,CreatePolicy,DeletePolicy,ShowPolicy,ApplyPolicy,ShowWorkflow,ShowPVC,CreateUpgrade,CreateUser,DeleteUser,UpdateUser,ShowUser,Version,CreateFailover,UpdateCluster,CreateBenchmark,ShowBenchmark,DeleteBenchmark,UpdateNamespace'

# Namespace where operator will be deployed
# NOTE: Ansible will create namespaces that don't exist
pgo_operator_namespace='pgo'

# Comma separated list of namespaces Operator will manage
# NOTE: Ansible will create namespaces that don't exist
namespace='pgouser1,pgouser2'

# Crunchy Container Suite images to use. The tags centos7 and rhel7 are acceptable.
# CentOS7 images can be found in dockerhub: https://hub.docker.com/u/crunchydata
# RHEL7 images are available to Crunchy customers: https://access.crunchydata.com/login/
ccp_image_prefix='crunchydata'
ccp_image_tag='centos7-11.5-2.4.2'

# Crunchy PostgreSQL Operator images to use.  The tags centos7 and rhel7 are acceptable.
pgo_image_prefix='crunchydata'
pgo_image_tag='centos7-4.1.0'

# PGO Client Install
pgo_client_install='true'
pgo_client_version='v4.1.0'

# PGO Apiserver TLS Settings
#pgo_tls_no_verify='false'
#pgo_disable_tls='false'
#pgo_apiserver_port=8443

# Set to 'true' to assign the cluster-admin role to the PGO service account.  Needed for
# OCP installs to enable dynamic namespace creation (see the PGO docs for more details).
#pgo_cluster_admin='false'

# This will set default enhancements for operator deployed PostgreSQL clusters
auto_failover='false'
backrest='true'
badger='false'
metrics='false'

# pgbadger Defaults
pgbadgerport='10000'

# pgBackRest Defaults
archive_mode='true'
archive_timeout=60
#backrest_port=''

# Log Defaults
log_statement='none'
log_min_duration_statement=60000

# Autofail Settings
auto_failover_replace_replica=false
auto_failover_sleep_secs=9

# Scheduler Settings
scheduler_timeout=3600

# pgBackRest S3 Settings
#backrest_aws_s3_key=''
#backrest_aws_s3_secret=''
#backrest_aws_s3_bucket=''
#backrest_aws_s3_endpoint=''
#backrest_aws_s3_region=''

# Service Type for PG Primary & Replica Services
service_type='ClusterIP'

# ===================
# PostgreSQL Settings
# Default parameters for objects created when the database container starts
# such as: default database name and default username
# ===================
db_name='userdb'
db_password_age_days=60
db_password_length=20
db_port=5432
db_replicas=0
db_user='testuser'

# ==================
# Storage Settings
# ==================
# Which storage definitions to use when creating persistent volumes
# for a variety of uses.

backrest_storage='storageos'
backup_storage='storageos'
primary_storage='storageos'
replica_storage='storageos'

storage1_name='hostpathstorage'
storage1_access_mode='ReadWriteMany'
storage1_size='1G'
storage1_type='create'

storage2_name='replicastorage'
storage2_access_mode='ReadWriteMany'
storage2_size='700M'
storage2_type='create'

storage3_name='nfsstorage'
storage3_access_mode='ReadWriteMany'
storage3_size='1G'
storage3_type='create'
storage3_supplemental_groups=65534

storage4_name='nfsstoragered'
storage4_access_mode='ReadWriteMany'
storage4_size='1G'
storage4_match_labels='crunchyzone=red'
storage4_type='create'
storage4_supplemental_groups=65534

storage5_name='storageos'
storage5_access_mode='ReadWriteOnce'
storage5_size='300M'
storage5_type='dynamic'
storage5_class='fast'
storage5_fs_group=26

storage6_name='primarysite'
storage6_access_mode='ReadWriteOnce'
storage6_size='4G'
storage6_type='dynamic'
storage6_class='primarysite'
storage6_fs_group=26

storage7_name='alternatesite'
storage7_access_mode='ReadWriteOnce'
storage7_size='4G'
storage7_type='dynamic'
storage7_class='alternatesite'
storage7_fs_group=26

storage8_name='gce'
storage8_access_mode='ReadWriteOnce'
storage8_size='300M'
storage8_type='dynamic'
storage8_class='standard'
storage8_fs_group=26

storage9_name='rook'
storage9_access_mode='ReadWriteOnce'
storage9_size='1Gi'
storage9_type='dynamic'
storage9_class='rook-ceph-block'
storage9_fs_group=26

# ==================
# Container Resource Configurations
# ==================
# Define container resource configurations that can be used to set CPU & memory requirements and limits 
# for containers created by the PGO.  Also set default resource configs for various PGO container types.

#default_container_resources=''
#default_load_resources=''
#default_lspvc_resources=''
#default_rmdata_resources=''
#default_backup_resources=''
#default_pgbouncer_resources=''
#default_pgpool_resources=''

resource1_name='small'
resource1_requests_memory='512Mi'
resource1_requests_cpu=0.1
resource1_limits_memory='512Mi'
resource1_limits_cpu=0.1

resource2_name='large'
resource2_requests_memory='2Gi'
resource2_requests_cpu=2.0
resource2_limits_memory='2Gi'
resource2_limits_cpu=4.0

# ==================
# Metrics
# ==================
# Optional installation of Grafana and Prometheus optimized
# to work with the Crunchy PostgreSQL Operator

# Note: Ansible will create namespaces that don't exist
metrics_namespace='metrics'
exporterport='9187'

grafana_install='false'
grafana_admin_username='admin'
grafana_admin_password=''
#grafana_storage_access_mode='ReadWriteOnce'
#grafana_storage_class_name='fast'
#grafana_volume_size='1G'
#grafana_supplemental_groups=65534
#grafana_fs_group=26

prometheus_install='false'
#prometheus_storage_access_mode='ReadWriteOnce'
#prometheus_storage_class_name='fast'
#prometheus_volume_size='1G'
#prometheus_supplemental_groups=65534
#prometheus_fs_group=26


# ==================
# Namespace Cleanup
# ==================
# The following settings determine whether or not the PGO and metrics namespaces (defined using 
# inventory variables 'pgo_operator_namespace', 'namespace' and 'metrics_namespace') are deleted
# when deprovisioning. Please note that this will also result in the deletion of any non-PGO
# resources deployed in these namespaces, and cannot be undone. By default (and unless otherwise 
# specified using the variables below), all namespaces will be preserved when deprovisioning.

#delete_operator_namespace='false'
#delete_watched_namespaces='false'
#delete_metrics_namespace='false'
