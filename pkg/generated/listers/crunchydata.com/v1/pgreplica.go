/*
Copyright 2020 Crunchy Data Solutions, Inc.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/crunchydata/postgres-operator/pkg/apis/crunchydata.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PgreplicaLister helps list Pgreplicas.
// All objects returned here must be treated as read-only.
type PgreplicaLister interface {
	// List lists all Pgreplicas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Pgreplica, err error)
	// Pgreplicas returns an object that can list and get Pgreplicas.
	Pgreplicas(namespace string) PgreplicaNamespaceLister
	PgreplicaListerExpansion
}

// pgreplicaLister implements the PgreplicaLister interface.
type pgreplicaLister struct {
	indexer cache.Indexer
}

// NewPgreplicaLister returns a new PgreplicaLister.
func NewPgreplicaLister(indexer cache.Indexer) PgreplicaLister {
	return &pgreplicaLister{indexer: indexer}
}

// List lists all Pgreplicas in the indexer.
func (s *pgreplicaLister) List(selector labels.Selector) (ret []*v1.Pgreplica, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Pgreplica))
	})
	return ret, err
}

// Pgreplicas returns an object that can list and get Pgreplicas.
func (s *pgreplicaLister) Pgreplicas(namespace string) PgreplicaNamespaceLister {
	return pgreplicaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PgreplicaNamespaceLister helps list and get Pgreplicas.
// All objects returned here must be treated as read-only.
type PgreplicaNamespaceLister interface {
	// List lists all Pgreplicas in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Pgreplica, err error)
	// Get retrieves the Pgreplica from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Pgreplica, error)
	PgreplicaNamespaceListerExpansion
}

// pgreplicaNamespaceLister implements the PgreplicaNamespaceLister
// interface.
type pgreplicaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Pgreplicas in the indexer for a given namespace.
func (s pgreplicaNamespaceLister) List(selector labels.Selector) (ret []*v1.Pgreplica, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Pgreplica))
	})
	return ret, err
}

// Get retrieves the Pgreplica from the indexer for a given namespace and name.
func (s pgreplicaNamespaceLister) Get(name string) (*v1.Pgreplica, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("pgreplica"), name)
	}
	return obj.(*v1.Pgreplica), nil
}
